@{
    ViewBag.Title = "Asignacion a Desarrolladores";
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">

<style>
    .gcs-assign-main-container {
        display: flex;
        /* !!! AJUSTA ESTE VALOR (ej. 80px) SEGÚN LA ALTURA REAL DE TU HEADER !!! */
        height: calc(100vh - 80px);
        overflow: hidden;
        margin-top: 1rem;
        border: 1px solid #dee2e6;
        background-color: #fff;
    }

    .gcs-assign-requests-panel {
        width: 33.333%;
        border-right: 1px solid #dee2e6;
        padding: 0;
        overflow-y: auto;
        background-color: #f8f9fa;
    }

    .gcs-assign-details-panel {
        width: 66.667%;
        padding: 1.5rem; /* Padding para el contenido interno */
        overflow-y: auto; /* Scroll si el card es más alto */
        /* No fijar altura aquí, se adaptará al contenido */
    }

    .gcs-assign-requests-panel .list-group {
        border-radius: 0;
        border: none;
    }

    .gcs-assign-request-card {
        cursor: pointer;
        transition: background-color 0.2s ease-in-out, border-left-color 0.2s ease-in-out;
        border: none;
        border-left: 4px solid transparent;
        border-bottom: 1px solid #dee2e6;
        padding: 0.8rem 1rem;
        background-color: #fff;
    }

        .gcs-assign-request-card:last-child {
            border-bottom: none;
        }

        .gcs-assign-request-card:hover {
            background-color: #f1f3f5;
        }

        .gcs-assign-request-card.selected {
            border-left-color: var(--bs-primary, #0d6efd);
            background-color: #e7f1ff;
        }

        .gcs-assign-request-card .request-card-title {
            font-size: 0.95rem;
            font-weight: 500;
            margin-bottom: 0.1rem;
        }

        .gcs-assign-request-card .request-card-meta {
            font-size: 0.75rem;
            color: #6c757d;
        }

        .gcs-assign-request-card .badge {
            font-size: 0.7rem;
            padding: 0.2rem 0.5rem;
        }

    .gcs-assign-no-selection {
        min-height: 300px; /* Altura mínima para el placeholder */
        display: flex; /* Usar flex para centrar */
        flex-direction: column;
        justify-content: center;
        align-items: center;
        text-align: center;
        color: #6c757d;
    }

        .gcs-assign-no-selection i {
            font-size: 2.5rem;
            margin-bottom: 1rem;
            color: #adb5bd;
        }

    .gcs-assign-empty-state i {
        font-size: 1.5rem;
        display: block;
        margin-bottom: 10px;
        color: #adb5bd;
    }

    .gcs-assign-empty-state {
        padding: 40px;
        text-align: center;
        color: #6c757d;
    }

    #developer-select option[disabled] {
        font-style: italic;
        color: #6c757d;
    }

    /* Asegurarse que el card tome el ancho disponible */
    #details-card-container {
        width: 100%;
    }
</style>

<div class="container-fluid mt-3">
    <h1 class="h3 mb-3">@ViewBag.Title</h1>

    <div class="gcs-assign-main-container row g-0">
        <!-- Panel izquierdo -->
        <div class="col-lg-4 gcs-assign-requests-panel">
            <h2 class="h5 mb-0 sticky-top bg-light py-2 px-3 border-bottom">Solicitudes Pendientes</h2>
            <div id="requests-list" class="list-group list-group-flush">
                <div id="empty-list-message" class="list-group-item gcs-assign-empty-state" style="display: none;">
                    <i class="fas fa-inbox"></i>No hay solicitudes pendientes.
                </div>
            </div>
        </div>

        <!-- Panel derecho -->
        <div class="col-lg-8 gcs-assign-details-panel">
            <div id="no-selection-placeholder" class="gcs-assign-no-selection">
                <i class="fas fa-arrow-left"></i>
                <p class="mt-3">Seleccione una solicitud<br>para ver detalles y asignar.</p>
            </div>
            <div class="card shadow-sm" id="details-card-container" style="display: none;">
                <div class="card-header bg-white d-flex justify-content-between align-items-center">
                    <div> <h5 class="card-title mb-0" id="detail-title"></h5> <small class="text-muted">Detalles</small> </div>
                    <span class="badge rounded-pill" id="detail-status-badge"></span>
                </div>
                <div class="card-body">
                    <div class="row g-3 mb-4">
                        <div class="col-md-6"> <p class="text-muted small mb-1">ID</p> <p class="fw-bold mb-0" id="detail-id"></p> </div>
                        <div class="col-md-6"> <p class="text-muted small mb-1">Tipo</p> <p class="fw-bold mb-0" id="detail-type"></p> </div>
                        <div class="col-md-6"> <p class="text-muted small mb-1">Fecha Sol.</p> <p class="fw-bold mb-0" id="detail-date"></p> </div>
                        <div class="col-md-6"> <p class="text-muted small mb-1">Prioridad</p> <p class="fw-bold mb-0"> <span id="detail-priority"></span> <span class="badge rounded-pill ms-2" id="detail-priority-badge-inline"></span> </p> </div>
                        <div class="col-md-6"> <p class="text-muted small mb-1">Responsable</p> <p class="fw-bold mb-0" id="detail-responsible"></p> </div>
                        <div class="col-md-6" id="detail-assigned-container" style="display: none;"> <p class="text-muted small mb-1">Asignado a</p> <p class="fw-bold mb-0" id="detail-assigned"></p> </div>
                    </div>
                    <hr class="my-4">
                    <div> <p class="text-muted small mb-1">Descripción</p> <p class="mb-0" id="detail-description"></p> </div>
                    <div class="text-end mt-4"> <button type="button" class="btn btn-primary" id="assign-button" data-bs-toggle="modal" data-bs-target="#assign-modal" disabled> <i class="fas fa-user-plus"></i> Asignar </button> </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Modales Bootstrap -->
<div class="modal fade" id="assign-modal" tabindex="-1" aria-labelledby="assignModalLabel" aria-hidden="true"> <div class="modal-dialog modal-dialog-centered"> <div class="modal-content"> <div class="modal-header"><h5 class="modal-title" id="assignModalLabel">Asignar/Reasignar Solicitud</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div> <div class="modal-body"> <p id="assign-modal-description" class="mb-3 text-muted"></p> <div class="mb-3"><label for="developer-select" class="form-label">Seleccione Desarrollador:</label><select class="form-select" id="developer-select"><option value="" disabled selected>-- Cargando --</option></select></div> <div class="alert alert-secondary small mt-4"><h6 class="alert-heading small">Leyenda Carga</h6><p class="mb-1"><span class="badge bg-success">Baja</span>: 0-2</p><p class="mb-1"><span class="badge bg-warning text-dark">Media</span>: 3</p><p class="mb-0"><span class="badge bg-danger">Alta</span>: 4+</p></div> </div> <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cancelar</button><button type="button" class="btn btn-primary" id="assign-confirm" disabled><i class="fas fa-check"></i> Confirmar</button></div> </div> </div> </div>
<div class="modal fade" id="confirm-modal" tabindex="-1" aria-labelledby="confirmModalLabel" aria-hidden="true"> <div class="modal-dialog modal-dialog-centered"> <div class="modal-content"> <div class="modal-header"><h5 class="modal-title d-flex align-items-center" id="confirmModalLabel"><i class="fas fa-check-circle text-success me-2 fs-4" id="confirm-modal-icon-success"></i><i class="fas fa-exclamation-triangle text-warning me-2 fs-4" id="confirm-modal-icon-warning" style="display:none;"></i><span id="confirm-modal-title">Confirmar</span></h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div> <div class="modal-body"><p id="confirm-message"></p></div> <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" id="confirm-cancel">Cancelar</button><button type="button" class="btn btn-primary" id="confirm-ok">Confirmar</button></div> </div> </div> </div>
<div class="modal fade" id="warning-high-load-modal" tabindex="-1" aria-labelledby="warningModalLabel" aria-hidden="true"> <div class="modal-dialog modal-dialog-centered"> <div class="modal-content"> <div class="modal-header"><h5 class="modal-title d-flex align-items-center" id="warningModalLabel"><i class="fas fa-exclamation-triangle text-warning me-2 fs-4"></i>Advertencia Carga Alta</h5><button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button></div> <div class="modal-body"><p>Desarrollador <strong id="warning-dev-name"></strong> tiene carga alta (<span id="warning-dev-tasks"></span> tareas).</p><p class="mt-2">No se recomienda asignar más.</p></div> <div class="modal-footer"><button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal" id="warning-high-load-cancel">Elegir Otro</button><button type="button" class="btn btn-primary" id="warning-high-load-proceed">Asignar Igualmente</button></div> </div> </div> </div>

<!-- Toast Container -->
<div class="toast-container position-fixed bottom-0 end-0 p-3" style="z-index: 1100"></div>

<script>
    // --- DATOS DE EJEMPLO ---
    let allRequests = [{ id: "SOL-001", title: "Actualización módulo facturación", type: "Mejora", date: "2025-04-05", priority: "Alta", responsible: "Comité Cambios", description: "Actualizar el módulo de facturación...", status: "Aprobada", assignedTo: null, assignedDevId: null }, { id: "SOL-002", title: "Corrección errores reportes", type: "Corrección", date: "2025-04-03", priority: "Media", responsible: "Comité Cambios", description: "Corregir errores en la generación...", status: "Aprobada", assignedTo: null, assignedDevId: null }, { id: "SOL-003", title: "Integración sistema inventario", type: "Nueva Funcionalidad", date: "2025-04-01", priority: "Alta", responsible: "Líder Proyecto", description: "Desarrollar una integración...", status: "Aprobada", assignedTo: null, assignedDevId: null }, { id: "SOL-004", title: "Ajuste interfaz login", type: "Mejora", date: "2025-03-28", priority: "Baja", responsible: "Comité Cambios", description: "Pequeños ajustes visuales...", status: "Asignada", assignedTo: "Elena Rodríguez", assignedDevId: 1 }, { id: "SOL-005", title: "Implementar 2FA", type: "Mejora", date: "2025-04-10", priority: "Alta", responsible: "Líder Proyecto", description: "Añadir autenticación de dos factores.", status: "Asignada", assignedTo: "Carlos Méndez", assignedDevId: 2 }];
    let developers = [{ id: 1, name: "Elena Rodríguez", tasks: 1 }, { id: 2, name: "Carlos Méndez", tasks: 2 }, { id: 3, name: "Ana Martínez", tasks: 3 }, { id: 4, name: "Miguel Sánchez", tasks: 4 }, { id: 5, name: "Laura González", tasks: 0 }, { id: 6, name: "David Fernández", tasks: 5 }];
    const DEVELOPER_HIGH_LOAD_THRESHOLD = 4;

    // --- ESTADO ---
    let selectedRequestId = null;
    let developerToAssignId = null;
    let developerToWarn = null;
    let assignModalInstance = null;
    let confirmModalInstance = null;
    let warningModalInstance = null;

    // --- ELEMENTOS DOM ---
    const requestsListEl = document.getElementById('requests-list');
    const emptyListMessageEl = document.getElementById('empty-list-message');
    const noSelectionPlaceholderEl = document.getElementById('no-selection-placeholder');
    const detailsCardContainerEl = document.getElementById('details-card-container');
    const assignButtonEl = document.getElementById('assign-button');
    const assignModalEl = document.getElementById('assign-modal');
    const assignModalDescriptionEl = document.getElementById('assign-modal-description');
    const developerSelectEl = document.getElementById('developer-select');
    const assignConfirmBtn = document.getElementById('assign-confirm');
    const confirmModalEl = document.getElementById('confirm-modal');
    const confirmModalTitleEl = document.getElementById('confirm-modal-title');
    const confirmModalIconSuccessEl = document.getElementById('confirm-modal-icon-success');
    const confirmModalIconWarningEl = document.getElementById('confirm-modal-icon-warning');
    const confirmMessageEl = document.getElementById('confirm-message');
    const confirmOkBtn = document.getElementById('confirm-ok');
    const warningHighLoadModalEl = document.getElementById('warning-high-load-modal');
    const warningDevNameEl = document.getElementById('warning-dev-name');
    const warningDevTasksEl = document.getElementById('warning-dev-tasks');
    const warningHighLoadCancelBtn = document.getElementById('warning-high-load-cancel');
    const warningHighLoadProceedBtn = document.getElementById('warning-high-load-proceed');
    const toastContainerEl = document.querySelector('.toast-container');

    // --- FUNCIONES AUXILIARES ---
    const formatDate = (dStr) => { try { const d = new Date(dStr + 'T00:00:00'); return d.toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: 'numeric' }); } catch (e) { return dStr || 'N/A'; } };
    const getPriorityClass = (p) => { const l = (p || '').toLowerCase(); if (l === 'alta') return 'bg-danger'; if (l === 'media') return 'bg-warning text-dark'; if (l === 'baja') return 'bg-success'; return 'bg-primary'; };
    const getStatusClass = (s) => { const l = (s || '').toLowerCase(); if (l === 'aprobada') return 'bg-primary'; if (l === 'asignada') return 'bg-info text-dark'; return 'bg-secondary'; };
    const openModal = (modalInstance) => { if (modalInstance) modalInstance.show(); };
    const closeModal = (modalInstance) => { if (modalInstance) modalInstance.hide(); };

    // --- RENDERIZADO ---
    function renderRequestsList() {
        requestsListEl.innerHTML = '';
        const displayRequests = allRequests.filter(req => req.status === 'Aprobada' || req.status === 'Asignada');
        if (displayRequests.length === 0) { emptyListMessageEl.style.display = 'block'; requestsListEl.appendChild(emptyListMessageEl); return; }
        emptyListMessageEl.style.display = 'none';
        displayRequests.sort((a, b) => { if (a.status === 'Aprobada' && b.status !== 'Aprobada') return -1; if (a.status !== 'Aprobada' && b.status === 'Aprobada') return 1; return (b.id || "").localeCompare(a.id || ""); });
        displayRequests.forEach(request => {
            const isSelected = selectedRequestId === request.id;
            const item = document.createElement('a'); // Cambiado a 'a' para semántica de list-group-item-action
            item.href = "#"; // Evitar navegación real
            item.className = `list-group-item list-group-item-action gcs-assign-request-card ${isSelected ? 'selected' : ''}`;
            item.dataset.id = request.id;
            const assignedInfo = request.status === 'Asignada' ? `<small class="d-block text-muted mt-1"><i class="fas fa-user-check text-info me-1"></i> ${request.assignedTo || 'Asignada'}</small>` : '';
            item.innerHTML = `
                <div class="d-flex justify-content-between align-items-start">
                    <div>
                        <h6 class="request-card-title mb-1">${request.title}</h6>
                        <small class="request-card-meta">${request.id} • ${request.type} • ${formatDate(request.date)}</small>
                         ${assignedInfo}
                    </div>
                    <span class="badge rounded-pill ${getPriorityClass(request.priority)}">${request.priority}</span>
                </div>`;
            item.addEventListener('click', (e) => { e.preventDefault(); handleSelectRequest(request.id); }); requestsListEl.appendChild(item);
        });
    }
    function renderRequestDetails() {
        const req = allRequests.find(r => r.id === selectedRequestId);
        if (!req) { noSelectionPlaceholderEl.style.display = 'flex'; detailsCardContainerEl.style.display = 'none'; return; }
        noSelectionPlaceholderEl.style.display = 'none'; detailsCardContainerEl.style.display = 'block';
        document.getElementById('detail-title').textContent = req.title; document.getElementById('detail-id').textContent = req.id;
        document.getElementById('detail-type').textContent = req.type; document.getElementById('detail-date').textContent = formatDate(req.date);
        document.getElementById('detail-priority').textContent = req.priority; document.getElementById('detail-responsible').textContent = req.responsible;
        document.getElementById('detail-description').textContent = req.description || 'N/A';
        const statusBadge = document.getElementById('detail-status-badge'); statusBadge.textContent = req.status; statusBadge.className = `badge rounded-pill ${getStatusClass(req.status)}`;
        const priorityBadge = document.getElementById('detail-priority-badge-inline'); priorityBadge.textContent = req.priority; priorityBadge.className = `badge rounded-pill ${getPriorityClass(req.priority)}`;
        const assignedDiv = document.getElementById('detail-assigned-container');
        if (req.status === 'Asignada' && req.assignedTo) { document.getElementById('detail-assigned').textContent = req.assignedTo; assignedDiv.style.display = 'block'; }
        else { assignedDiv.style.display = 'none'; }
        const canAssign = req.status === 'Aprobada' || req.status === 'Asignada';
        assignButtonEl.disabled = !canAssign;
        assignButtonEl.innerHTML = req.status === 'Aprobada' ? '<i class="fas fa-user-plus"></i> Asignar' : (req.status === 'Asignada' ? '<i class="fas fa-exchange-alt"></i> Reasignar' : '<i class="fas fa-ban"></i> No Asignable');
    }
    function renderDeveloperOptions() {
        developerSelectEl.innerHTML = '<option value="" disabled selected>-- Seleccione --</option>';
        if (!developers || developers.length === 0) { developerSelectEl.innerHTML += '<option disabled>No hay</option>'; return; }
        developers.forEach(dev => {
            const opt = document.createElement('option'); opt.value = dev.id;
            const tasks = dev.tasks || 0; const tasksTxt = `${tasks} tarea${tasks !== 1 ? 's' : ''}`;
            opt.textContent = `${dev.name} (${tasksTxt})`; opt.dataset.name = dev.name; opt.dataset.tasks = tasks;
            developerSelectEl.appendChild(opt);
        });
    }

    // --- MANEJADORES DE EVENTOS ---
    function handleSelectRequest(requestId) { if (selectedRequestId === requestId) return; selectedRequestId = requestId; renderRequestsList(); renderRequestDetails(); }
    function handleOpenAssignModalOnShow() {
        const req = allRequests.find(r => r.id === selectedRequestId);
        if (!req) { console.warn("Modal show event sin request."); closeModal(assignModalInstance); return; }
        const actionText = req.status === 'Aprobada' ? 'Asignar' : 'Reasignar';
        assignModalEl.querySelector('.modal-title').textContent = `${actionText} Solicitud`;
        assignModalDescriptionEl.textContent = `${actionText}: "${req.title}"`;
        renderDeveloperOptions(); developerSelectEl.value = ''; assignConfirmBtn.disabled = true;
        developerToAssignId = null; developerToWarn = null;
    }
    function handleDeveloperSelectionChange() { developerToAssignId = developerSelectEl.value; assignConfirmBtn.disabled = !developerToAssignId; }
    function handleAssignConfirmClick() {
        if (!developerToAssignId) return;
        developerToWarn = developers.find(dev => dev.id == developerToAssignId);
        const req = allRequests.find(r => r.id === selectedRequestId);
        if (!developerToWarn || !req) { showToast('Error', 'Error inesperado.', 'error'); return; }
        if (req.status === 'Asignada' && req.assignedDevId == developerToWarn.id) { showToast('Información', `${developerToWarn.name} ya tiene asignada esta tarea.`, 'info'); closeModal(assignModalInstance); return; }
        if (developerToWarn.tasks >= DEVELOPER_HIGH_LOAD_THRESHOLD) {
            closeModal(assignModalInstance);
            warningDevNameEl.textContent = developerToWarn.name; warningDevTasksEl.textContent = developerToWarn.tasks;
            openModal(warningModalInstance);
        } else {
            closeModal(assignModalInstance);
            const actionText = req.status === 'Aprobada' ? 'Asignar' : 'Reasignar';
            showConfirmationModal(`${actionText} "${req.title}"`, `¿${actionText} a ${developerToWarn.name} (${developerToWarn.tasks} tareas)?`, () => performAssignment(req, developerToWarn), 'success');
        }
    }
    function handleAssignAnyway() {
        if (!developerToWarn || !selectedRequestId) { closeModal(warningModalInstance); showToast('Error', 'No se pudo asignar.', 'error'); return; }
        const req = allRequests.find(r => r.id === selectedRequestId);
        if (!req) { closeModal(warningModalInstance); showToast('Error', 'No se pudo asignar.', 'error'); return; }
        closeModal(warningModalInstance); performAssignment(req, developerToWarn);
    }

    // --- LÓGICA PRINCIPAL ---
    function performAssignment(request, newDeveloper) {
        const reqIdx = allRequests.findIndex(r => r.id === request.id);
        const newDevIdx = developers.findIndex(d => d.id === newDeveloper.id);
        if (reqIdx === -1 || newDevIdx === -1) { showToast('Error', 'No se pudo actualizar.', 'error'); return; }
        const oldDevId = allRequests[reqIdx].assignedDevId;
        const isReassign = request.status === 'Asignada' && oldDevId !== newDeveloper.id;
        if (isReassign && oldDevId) {
            const oldDevIdx = developers.findIndex(d => d.id === oldDevId);
            if (oldDevIdx !== -1 && developers[oldDevIdx].tasks > 0) { developers[oldDevIdx].tasks--; }
        }
        allRequests[reqIdx].status = 'Asignada'; allRequests[reqIdx].assignedTo = newDeveloper.name;
        allRequests[reqIdx].assignedDevId = newDeveloper.id;
        developers[newDevIdx].tasks++;
        renderRequestsList(); renderRequestDetails();
        closeModal(confirmModalInstance);
        showToast('Asignación Exitosa', `Solicitud "${request.title}" asignada a ${newDeveloper.name}.`, 'success');
        developerToAssignId = null; developerToWarn = null;
    }
    function showConfirmationModal(title, message, onConfirmCallback, iconType = 'success') {
        confirmModalTitleEl.textContent = title; confirmMessageEl.textContent = message;
        confirmModalIconSuccessEl.style.display = iconType === 'success' ? 'block' : 'none';
        confirmModalIconWarningEl.style.display = iconType === 'warning' ? 'block' : 'none';
        const newOkBtn = confirmOkBtn.cloneNode(true); // Clonar para quitar listeners
        confirmOkBtn.parentNode.replaceChild(newOkBtn, confirmOkBtn);
        document.getElementById('confirm-ok').addEventListener('click', () => { onConfirmCallback(); closeModal(confirmModalInstance); }, { once: true });
        openModal(confirmModalInstance);
    }
    function showToast(title, message, type = 'success', delay = 5000) {
        const toastId = 'toast-' + Date.now(); const toastEl = document.createElement('div');
        toastEl.id = toastId; toastEl.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : (type === 'error' ? 'danger' : 'info')} border-0`;
        toastEl.setAttribute('role', 'alert'); toastEl.setAttribute('aria-live', 'assertive'); toastEl.setAttribute('aria-atomic', 'true');
        toastEl.innerHTML = `<div class="d-flex"><div class="toast-body"><strong>${title}</strong><br>${message}</div><button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button></div>`;
        toastContainerEl.appendChild(toastEl);
        const toast = new bootstrap.Toast(toastEl, { delay: delay }); toast.show();
        toastEl.addEventListener('hidden.bs.toast', () => { toastEl.remove(); });
    }

    // --- INICIALIZACIÓN ---
    function init() {
        if (typeof bootstrap !== 'undefined' && bootstrap.Modal) {
            if (assignModalEl) assignModalInstance = new bootstrap.Modal(assignModalEl);
            if (confirmModalEl) confirmModalInstance = new bootstrap.Modal(confirmModalEl);
            if (warningHighLoadModalEl) warningModalInstance = new bootstrap.Modal(warningHighLoadModalEl);
            assignModalEl?.addEventListener('show.bs.modal', handleOpenAssignModalOnShow);
        } else {
            console.error("Bootstrap Modals no encontrados."); if (assignButtonEl) assignButtonEl.disabled = true;
        }
        developerSelectEl?.addEventListener('change', handleDeveloperSelectionChange);
        assignConfirmBtn?.addEventListener('click', handleAssignConfirmClick);
        warningHighLoadCancelBtn?.addEventListener('click', () => { closeModal(warningModalInstance); });
        warningHighLoadProceedBtn?.addEventListener('click', handleAssignAnyway);
        // Ya no se necesita listener para confirmOkBtn aquí, se añade dinámicamente

        renderRequestsList();
        renderRequestDetails();
    }
    document.addEventListener('DOMContentLoaded', init);
</script>