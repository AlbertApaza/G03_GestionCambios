@{
    ViewBag.Title = "Crear Nuevo Proyecto";
    var usuarios = ViewBag.Usuarios as List<G03_ProyectoGestion.Models.tbUsuarios> ?? new List<G03_ProyectoGestion.Models.tbUsuarios>();
    var metodologias = ViewBag.Metodologias as List<G03_ProyectoGestion.Models.tbMetodologias> ?? new List<G03_ProyectoGestion.Models.tbMetodologias>();
    var roles = ViewBag.Roles as List<G03_ProyectoGestion.Models.tbRoles> ?? new List<G03_ProyectoGestion.Models.tbRoles>();
    // Obtener el nombre de RUP para JS
    string rupMetodologiaNombreJs = ViewBag.RupMetodologiaNombre != null ? ViewBag.RupMetodologiaNombre.ToString().ToUpper() : "";
}

<!-- Font Awesome (si no está ya en tu _Layout.cshtml) -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.1.1/css/all.min.css" integrity="sha512-KfkfwYDsLkIlwQp6LFnl8zNdLGxu9YAA1QvwINks4PhcElQSvqcyVLLD9aMhXd13uQjoXtEKNosOWaZqXgel0g==" crossorigin="anonymous" referrerpolicy="no-referrer" />

<style>
    /* --- ESTILOS EMBEBIDOS PARA CREAR PROYECTO --- */
    :root {
        --color-purple: #6a11cb;
        --color-blue: #2575fc;
        --color-text-dark: #343a40;
        --color-text-light: #6c757d;
        --form-control-border: #ced4da;
        --form-control-focus-border: var(--color-purple);
        --form-control-focus-shadow: rgba(106, 17, 203, 0.25);
        --card-bg: #ffffff;
        --button-text-color: #fff;
    }

    .create-project-container {
        max-width: 800px; /* Ancho máximo para el formulario */
        margin: 2rem auto; /* Centrado y con margen superior/inferior */
        padding: 2rem;
        background-color: var(--card-bg);
        border-radius: 12px;
        box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
    }

        .create-project-container h2 {
            color: var(--color-text-dark);
            text-align: center;
            margin-bottom: 2.5rem;
            font-weight: 600;
            background: linear-gradient(135deg, var(--color-purple) 0%, var(--color-blue) 100%);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

    .form-section-divider {
        margin-top: 2.5rem;
        margin-bottom: 1.5rem;
        border: 0;
        border-top: 1px solid #e0e0e0;
    }

    .form-label {
        font-weight: 500;
        color: var(--color-text-dark);
        margin-bottom: 0.5rem;
        display: block;
    }

    .form-control, .form-select {
        display: block;
        width: 100%;
        padding: 0.75rem 1rem;
        font-size: 0.95rem;
        font-weight: 400;
        line-height: 1.5;
        color: var(--color-text-dark);
        background-color: #fff;
        background-clip: padding-box;
        border: 1px solid var(--form-control-border);
        -webkit-appearance: none;
        -moz-appearance: none;
        appearance: none;
        border-radius: 8px;
        transition: border-color .15s ease-in-out,box-shadow .15s ease-in-out;
    }

        .form-control:focus, .form-select:focus {
            border-color: var(--form-control-focus-border);
            outline: 0;
            box-shadow: 0 0 0 0.25rem var(--form-control-focus-shadow);
        }

    textarea.form-control {
        min-height: 120px;
        resize: vertical;
    }

    .btn-submit-gradient {
        background: linear-gradient(to right, var(--color-purple), var(--color-blue));
        border: none;
        color: var(--button-text-color) !important;
        padding: 0.75rem 1.5rem;
        font-size: 1rem;
        font-weight: 500;
        border-radius: 8px;
        transition: opacity 0.2s ease;
        cursor: pointer;
    }

        .btn-submit-gradient:hover {
            opacity: 0.9;
            color: var(--button-text-color) !important;
        }

    .btn-add-member {
        background-color: var(--color-blue);
        color: var(--button-text-color);
        border: none;
        padding: 0.5rem 1rem;
        font-size: 0.9rem;
        border-radius: 8px;
        transition: background-color 0.2s ease;
        margin-top: 0.5rem;
    }

        .btn-add-member:hover {
            background-color: var(--color-purple);
        }

        .btn-add-member i {
            margin-right: 5px;
        }

    #miembrosContainer .miembro {
        display: flex;
        gap: 1rem;
        margin-bottom: 1rem;
        align-items: center;
    }

        #miembrosContainer .miembro .form-select {
            flex-grow: 1;
        }

        #miembrosContainer .miembro .btn-remove-member {
            background-color: #dc3545;
            color: white;
            border: none;
            border-radius: 50%;
            width: 30px;
            height: 30px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.8rem;
            cursor: pointer;
            transition: background-color 0.2s ease;
            flex-shrink: 0;
        }

            #miembrosContainer .miembro .btn-remove-member:hover {
                background-color: #c82333;
            }

    .form-actions {
        margin-top: 2rem;
        text-align: center;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 500;
        color: var(--color-purple);
        margin-bottom: 1rem;
        padding-bottom: 0.5rem;
        border-bottom: 2px solid var(--color-blue);
        display: inline-block;
    }
    /* ESTILOS PARA ELEMENTOS DE CONFIGURACIÓN */
    #elementosConfiguracionContainer {
        margin-top: 1.5rem;
        padding-top: 1.5rem;
        border-top: 1px solid #e0e0e0; /* Separador visual */
    }

    .elemento-config-item {
        display: flex;
        align-items: center;
        margin-bottom: 0.75rem;
        padding: 0.5rem;
        border: 1px solid #eee;
        border-radius: 6px;
        background-color: #f9f9f9;
    }

        .elemento-config-item input[type="checkbox"] {
            margin-right: 10px;
            width: 1.15em;
            height: 1.15em;
            cursor: pointer;
        }

        .elemento-config-item label {
            margin-bottom: 0;
            font-weight: normal;
            cursor: pointer;
        }

        .elemento-config-item .descripcion-elemento { /* Para descripción de elementos no-RUP */
            font-size: 0.85em;
            color: var(--color-text-light);
            margin-left: 5px;
        }

    .fase-rup-titulo { /* NUEVO ESTILO PARA TÍTULOS DE FASE RUP */
        font-size: 1.1rem;
        font-weight: 600;
        color: var(--color-blue); /* O el color que prefieras */
        margin-top: 1.2rem;
        margin-bottom: 0.8rem;
        padding-bottom: 0.3rem;
        border-bottom: 1px solid var(--color-purple);
    }

        .fase-rup-titulo:first-of-type { /* Evitar doble margen superior para el primer título de fase */
            margin-top: 0.5rem;
        }

    /* --- FIN ESTILOS EMBEBIDOS --- */
</style>

<div class="container">
    <div class="create-project-container">
        <h2><i class="fas fa-folder-plus me-2"></i>Crear Nuevo Proyecto</h2>

        @using (Html.BeginForm("Crear", "Proyecto", FormMethod.Post, new { @class = "needs-validation", novalidate = "novalidate", id = "formCrearProyecto" }))
        {
            @Html.AntiForgeryToken()

            <div class="mb-3">
                <label for="nombreProyecto" class="form-label">Nombre del Proyecto:</label>
                <input type="text" id="nombreProyecto" name="nombreProyecto" class="form-control" required />
                <div class="invalid-feedback">Por favor, ingresa un nombre para el proyecto.</div>
            </div>

            <div class="mb-3">
                <label for="descripcionProyecto" class="form-label">Descripción:</label>
                <textarea id="descripcionProyecto" name="descripcionProyecto" class="form-control"></textarea>
            </div>

            <div class="row mb-3">
                <div class="col-md-6">
                    <label for="fechaInicio" class="form-label">Fecha de Inicio:</label>
                    <input type="date" id="fechaInicio" name="fechaInicio" class="form-control" required />
                    <div class="invalid-feedback">Por favor, selecciona una fecha de inicio.</div>
                    <div class="invalid-feedback" data-custom-validator="fechaInicioRup"></div> <!-- Para errores de RUP -->
                </div>
                <div class="col-md-6">
                    <label for="fechaFin" class="form-label">Fecha de Fin Estimada:</label>
                    <input type="date" id="fechaFin" name="fechaFin" class="form-control" required />
                    <div class="invalid-feedback">Por favor, selecciona una fecha de fin.</div>
                    <div class="invalid-feedback" data-custom-validator="fechaFinRup">La fecha de fin no puede ser anterior a la de inicio. Para RUP, el proyecto debe durar al menos 3 meses.</div>
                </div>
            </div>

            <div class="mb-4">
                <label for="idMetodologia" class="form-label">Metodología:</label>
                <select id="idMetodologia" name="idMetodologia" class="form-select" required>
                    <option value="">Selecciona una metodología...</option>
                    @foreach (var metodo in metodologias)
                    {
                        <option value="@metodo.idMetodologia" data-nombre-metodologia="@metodo.nombreMetodologia">@metodo.nombreMetodologia</option>
                    }
                </select>
                <div class="invalid-feedback">Por favor, selecciona una metodología.</div>
            </div>

            <!-- SECCIÓN PARA ELEMENTOS DE CONFIGURACIÓN -->
            <div id="elementosConfiguracionContainer" style="display:none;">
                <h4 class="section-title"><i class="fas fa-cogs me-2"></i>Elementos de Configuración</h4>
                <div id="listaElementos" class="mb-3">
                    <p class="text-muted small">Selecciona una metodología y fechas para ver los elementos disponibles.</p>
                </div>
                <div id="elementosLoading" style="display:none;">
                    <p><i class="fas fa-spinner fa-spin me-2"></i>Cargando elementos...</p>
                </div>
            </div>
            <!-- FIN SECCIÓN -->


            <hr class="form-section-divider">

            <h4 class="section-title"><i class="fas fa-users me-2"></i>Asignar Miembros al Proyecto</h4>
            <div id="miembrosContainer">
                @if (usuarios.Any() && roles.Any())
                {
                    <div class="miembro mb-2">
                        <select name="miembros" class="form-select">
                            <option value="">Selecciona un usuario...</option>
                            @foreach (var u in usuarios)
                            {
                                <option value="@u.idUsuario">@u.nombreUsuario (@u.emailUsuario)</option>
                            }
                        </select>

                        <select name="roles" class="form-select">
                            <option value="">Selecciona un rol...</option>
                            @foreach (var r in roles)
                            {
                                <option value="@r.idRol">@r.nombreRol</option>
                            }
                        </select>
                        <button type="button" class="btn-remove-member" onclick="removerMiembro(this)" title="Eliminar miembro" disabled>
                            <i class="fas fa-trash-alt"></i>
                        </button>
                    </div>
                }
                else
                {
                    <p class="text-muted small">
                        @if (!usuarios.Any())
                        {<span>No hay usuarios disponibles.</span>}
                        @if (!roles.Any())
                        {<span>No hay roles disponibles.</span>}
                        Asegúrate de tener usuarios y roles creados para poder asignarlos.
                    </p>
                }
            </div>

            if (usuarios.Any() && roles.Any())
            {
                <button type="button" class="btn btn-add-member" onclick="agregarMiembro()">
                    <i class="fas fa-plus-circle"></i>Agregar Otro Miembro
                </button>
            }

            <div class="form-actions">
                <button type="submit" class="btn btn-submit-gradient">
                    <i class="fas fa-check-circle me-2"></i>Crear Proyecto
                </button>
            </div>
        }
    </div>
</div>

@* Plantilla HTML para nuevos miembros *@
<template id="miembroPlantilla">
    <div class="miembro mb-2">
        <select name="miembros" class="form-select">
            <option value="">Selecciona un usuario...</option>
            @foreach (var u in usuarios)
            {
                <option value="@u.idUsuario">@Html.Raw(HttpUtility.JavaScriptStringEncode(u.nombreUsuario)) (@Html.Raw(HttpUtility.JavaScriptStringEncode(u.emailUsuario)))</option>
            }
        </select>

        <select name="roles" class="form-select">
            <option value="">Selecciona un rol...</option>
            @foreach (var r in roles)
            {
                <option value="@r.idRol">@Html.Raw(HttpUtility.JavaScriptStringEncode(r.nombreRol))</option>
            }
        </select>
        <button type="button" class="btn-remove-member" onclick="removerMiembro(this)" title="Eliminar miembro">
            <i class="fas fa-trash-alt"></i>
        </button>
    </div>
</template>


<script>
    const baseUrl = '@Url.Content("~/")';

    function agregarMiembro() {
        const hayUsuarios = @(usuarios.Any().ToString().ToLower());
        const hayRoles = @(roles.Any().ToString().ToLower());
        if (!hayUsuarios || !hayRoles) return;

        const plantilla = document.getElementById("miembroPlantilla");
        if (!plantilla) { console.error("Plantilla de miembro no encontrada."); return; }
        const clone = plantilla.content.cloneNode(true);
        document.getElementById("miembrosContainer").appendChild(clone);
        actualizarBotonesRemoverMiembro();
    }

    function removerMiembro(boton) {
        const miembroDiv = boton.closest('.miembro');
        if (miembroDiv) {
            miembroDiv.remove();
            actualizarBotonesRemoverMiembro();
        }
    }

    function actualizarBotonesRemoverMiembro() {
        const miembrosDivs = document.querySelectorAll("#miembrosContainer .miembro");
        miembrosDivs.forEach((div) => {
            const btnRemove = div.querySelector('.btn-remove-member');
            if (btnRemove) btnRemove.disabled = (miembrosDivs.length === 1);
        });
    }

    // --- LÓGICA PARA ELEMENTOS DE CONFIGURACIÓN ---
    const metodologiaSelect = document.getElementById('idMetodologia');
    const fechaInicioInput = document.getElementById('fechaInicio');
    const fechaFinInput = document.getElementById('fechaFin');
    const elementosContainer = document.getElementById('elementosConfiguracionContainer');
    const listaElementosDiv = document.getElementById('listaElementos');
    const elementosLoadingDiv = document.getElementById('elementosLoading');

    function debenCargarElementos() {
        return metodologiaSelect.value && fechaInicioInput.value && fechaFinInput.value;
    }

    async function cargarElementosConfiguracion() {
        if (!debenCargarElementos()) {
            elementosContainer.style.display = 'none';
            listaElementosDiv.innerHTML = '<p class="text-muted small">Selecciona una metodología y fechas para ver los elementos disponibles.</p>';
            return;
        }

        elementosContainer.style.display = 'block';
        listaElementosDiv.innerHTML = '';
        elementosLoadingDiv.style.display = 'block';

        const idMetodologia = metodologiaSelect.value;
        // const nombreMetodologia = metodologiaSelect.options[metodologiaSelect.selectedIndex].dataset.nombreMetodologia; // Para verificar RUP en cliente si fuera necesario

        try {
            const response = await fetch(`${baseUrl}Proyecto/ObtenerElementosPorMetodologia?idMetodologia=${idMetodologia}`);
            if (!response.ok) throw new Error(`Error HTTP: ${response.status}`);

            const result = await response.json();
            elementosLoadingDiv.style.display = 'none';

            if (result.success) {
                if (result.data && result.data.length > 0) {
                    if (result.isRup) {
                        // Manejar RUP (datos agrupados por fase)
                        result.data.forEach(grupoFase => {
                            const faseTitulo = document.createElement('h5'); // O h6, p, etc.
                            faseTitulo.className = 'fase-rup-titulo'; // Clase para estilizar
                            faseTitulo.textContent = grupoFase.faseNombre; // "FASE 1", "FASE 2", etc.
                            listaElementosDiv.appendChild(faseTitulo);

                            if (grupoFase.elementos && grupoFase.elementos.length > 0) {
                                grupoFase.elementos.forEach(elemento => {
                                    crearCheckboxElemento(elemento, listaElementosDiv, false); // false para no mostrar desc. del elemento
                                });
                            } else {
                                const pSinElementosFase = document.createElement('p');
                                pSinElementosFase.className = 'text-muted small ms-3';
                                pSinElementosFase.textContent = 'No hay elementos para esta fase.';
                                listaElementosDiv.appendChild(pSinElementosFase);
                            }
                        });
                    } else {
                        // Manejar otras metodologías (datos como lista plana)
                        result.data.forEach(elemento => {
                            crearCheckboxElemento(elemento, listaElementosDiv, true); // true para mostrar desc. del elemento
                        });
                    }
                } else {
                    listaElementosDiv.innerHTML = `<p class="text-muted small">${result.message || 'No hay elementos de configuración para la selección actual.'}</p>`;
                }
            } else {
                 listaElementosDiv.innerHTML = `<p class="text-danger small">${result.message || 'No se pudieron cargar los elementos.'}</p>`;
            }
        } catch (error) {
            console.error("Error al cargar elementos:", error);
            elementosLoadingDiv.style.display = 'none';
            listaElementosDiv.innerHTML = '<p class="text-danger small">Error al conectar con el servidor para cargar elementos.</p>';
        }
    }

    function crearCheckboxElemento(elemento, contenedor, mostrarDescripcionElemento) {
        const div = document.createElement('div');
        div.className = 'elemento-config-item';
        if (metodologiaSelect.options[metodologiaSelect.selectedIndex].dataset.nombreMetodologia.toUpperCase() === 'RUP'){
            div.classList.add('ms-3'); // Añade un margen a la izquierda para elementos RUP bajo su fase
        }


        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.name = 'selectedElementos';
        checkbox.value = elemento.idElemento;
        checkbox.id = `elemento-${elemento.idElemento}`;

        const label = document.createElement('label');
        label.htmlFor = `elemento-${elemento.idElemento}`;
        label.textContent = elemento.nombre;

        // Para RUP, la descripción ya es la fase, así que no la repetimos aquí.
        // Para otras metodologías, podemos mostrar la descripción del elemento si existe.
        if (mostrarDescripcionElemento && elemento.descripcion) {
            const descSpan = document.createElement('span');
            descSpan.className = 'descripcion-elemento';
            descSpan.textContent = ` (${elemento.descripcion})`; // O elemento.descripcionOriginal si lo usas
            label.appendChild(descSpan);
        }

        div.appendChild(checkbox);
        div.appendChild(label);
        contenedor.appendChild(div);
    }


    // Event listeners
    metodologiaSelect.addEventListener('change', cargarElementosConfiguracion);
    fechaInicioInput.addEventListener('change', cargarElementosConfiguracion);
    fechaFinInput.addEventListener('change', cargarElementosConfiguracion);

    ///////////////////////////////
    const fechaInicioInputJs = document.getElementById('fechaInicio');
    const fechaFinInputJs = document.getElementById('fechaFin');
    const metodologiaSelectJs = document.getElementById('idMetodologia');
    const RUP_METODOLOGIA_NOMBRE_JS = '@rupMetodologiaNombreJs'; // "RUP" o ""

    function validarFechasProyectoCliente() {
        let esValido = true;
        const inicio = fechaInicioInputJs.value;
        const fin = fechaFinInputJs.value;
        const errorContainerFin = document.querySelector('[data-custom-validator="fechaFinRup"]');
        errorContainerFin.textContent = ''; // Limpiar error previo
        errorContainerFin.style.display = 'none';


        if (!inicio || !fin) { // Si alguna fecha no está seleccionada, la validación 'required' de HTML5 se encargará
            return true;
        }

        const fechaInicioDate = new Date(inicio);
        const fechaFinDate = new Date(fin);
        // Asegurarse que las fechas no tengan componente de hora para la comparación de días
        fechaInicioDate.setHours(0,0,0,0);
        fechaFinDate.setHours(0,0,0,0);


        if (fechaFinDate < fechaInicioDate) {
            errorContainerFin.textContent = 'La fecha de fin no puede ser anterior a la fecha de inicio.';
            errorContainerFin.style.display = 'block';
            fechaFinInputJs.setCustomValidity('Fecha inválida.'); // Para Bootstrap
            esValido = false;
        } else {
            fechaFinInputJs.setCustomValidity(''); // Válido hasta ahora
        }

        const metodologiaSeleccionadaOption = metodologiaSelectJs.options[metodologiaSelectJs.selectedIndex];
        const nombreMetodologiaActual = metodologiaSeleccionadaOption ? metodologiaSeleccionadaOption.dataset.nombreMetodologia || metodologiaSeleccionadaOption.text : "";

        if (nombreMetodologiaActual && nombreMetodologiaActual.toUpperCase() === RUP_METODOLOGIA_NOMBRE_JS && RUP_METODOLOGIA_NOMBRE_JS !== "") {
            const fechaMinimaFinRup = new Date(fechaInicioDate);
            fechaMinimaFinRup.setMonth(fechaMinimaFinRup.getMonth() + 3);

            if (fechaFinDate < fechaMinimaFinRup) {
                 if (esValido) { // Si no había error previo de fin < inicio
                    errorContainerFin.textContent = 'Para la metodología RUP, el proyecto debe durar como mínimo 3 meses.';
                } else { // Concatenar error
                    errorContainerFin.textContent += ' Además, para RUP, el proyecto debe durar como mínimo 3 meses.';
                }
                errorContainerFin.style.display = 'block';
                fechaFinInputJs.setCustomValidity('Duración RUP inválida.');
                esValido = false;
            }
        }

        // Forzar a Bootstrap a re-evaluar la validez si se usó setCustomValidity
        if (!esValido) {
             const form = document.getElementById('formCrearProyecto');
             if(form.classList.contains('was-validated')){ // Solo si ya se intentó enviar
                fechaFinInputJs.classList.remove('is-valid');
                fechaFinInputJs.classList.add('is-invalid');
             }
        } else {
            if(document.getElementById('formCrearProyecto').classList.contains('was-validated')){
                fechaFinInputJs.classList.remove('is-invalid');
                // No agregar is-valid automáticamente aquí, dejar que Bootstrap lo haga al submit
            }
        }
        return esValido;
    }

    // Validar al cambiar las fechas o la metodología
    fechaInicioInputJs.addEventListener('change', validarFechasProyectoCliente);
    fechaFinInputJs.addEventListener('change', validarFechasProyectoCliente);
    metodologiaSelectJs.addEventListener('change', validarFechasProyectoCliente); // También validar cuando cambie la metodología

    // Bootstrap validation y manejo de form
    (function () {
        'use strict'
        var forms = document.querySelectorAll('.needs-validation')
        Array.prototype.slice.call(forms)
            .forEach(function (form) {
                form.addEventListener('submit', function (event) {
                    // Ejecutar nuestra validación de fechas personalizada ANTES de la validación de Bootstrap
                    if (!validarFechasProyectoCliente()) {
                        event.preventDefault();
                        event.stopPropagation();
                        // Asegurar que los mensajes de error se muestren si la validación personalizada falló
                        // y el formulario ya fue marcado como 'was-validated' o está a punto de serlo.
                        const errorContainerFin = document.querySelector('[data-custom-validator="fechaFinRup"]');
                        if (errorContainerFin.textContent) {
                            errorContainerFin.style.display = 'block';
                            fechaFinInputJs.classList.add('is-invalid'); // Asegurar estilo de Bootstrap
                        }
                    }

                    if (!form.checkValidity()) { // Validación nativa de Bootstrap y HTML5
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');

                    // La lógica de nombres para miembros y roles ya está aquí, eso es correcto.
                    // document.querySelectorAll("#miembrosContainer select[name='miembros']").forEach(x => x.name = "miembros");
                    // document.querySelectorAll("#miembrosContainer select[name='roles']").forEach(x => x.name = "roles");
                }, false)
            })
        actualizarBotonesRemoverMiembro(); // Asumo que esta función ya existe y es correcta
        // Llamada inicial para validación de fechas si ya hay valores (ej. al recargar con error de servidor)
        validarFechasProyectoCliente();
    })()
</script>