@{
    ViewBag.Title = "Gestor RUP por Fases";
}

<script src="https://cdn.tailwindcss.com"></script>
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<body class="bg-gray-100 text-gray-800" x-data="app()">
    <div class="container mx-auto p-4">
        <header class="bg-blue-600 text-white p-6 rounded-t-lg shadow-lg mb-6">
            <h1 class="text-4xl font-bold">Gestor RUP por Fases</h1>
            <p class="text-blue-100" x-show="selectedProject" x-text="`Gestionando Proyecto: ${selectedProject.name}`"></p>
            <p class="text-blue-100" x-show="!selectedProject">Cargando datos del proyecto...</p>
        </header>

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="my-4 p-4 bg-red-100 border-l-4 border-red-500 text-red-700 rounded-md shadow" role="alert">
                <p class="font-bold">Error</p>
                <p>@TempData["ErrorMessage"]</p>
            </div>
        }

        <main x-show="selectedProjectId" x-cloak class="p-6 bg-white rounded-lg shadow-lg">
            <div class="mb-6 flex justify-between items-center">
                <a href="@Url.Action("Index", "Proyecto")" class="btn btn-secondary text-sm flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" />
                    </svg>
                    Volver a Mis Proyectos
                </a>

                <a href="@Url.Action("Index", "Config", new { id = ViewBag.ProjectId })" class="btn btn-secondary text-sm flex items-center">
                    Asignar Actividades a Miembros
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 3.293a1 1 0 011.414 0l6 6a1 1 0 010 1.414l-6 6a1 1 0 01-1.414-1.414L14.586 11H3a1 1 0 110-2h11.586l-4.293-4.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                    </svg>
                </a>
            </div>

            <div x-show="selectedProject">
                <div class="flex flex-col md:flex-row items-center justify-between mb-10 p-6 bg-gray-50 rounded-lg shadow-md">
                    <div class="flex-grow text-center md:text-left md:pr-6 w-full md:w-auto mb-4 md:mb-0">
                        <h2 class="text-3xl lg:text-4xl font-bold text-blue-700" x-text="selectedProject.name"></h2>
                        <p class="text-gray-600 mt-1 text-sm lg:text-base"><strong class="font-medium">Descripción:</strong> <span x-text="selectedProject.scope"></span></p>
                    </div>
                    <div class="md:ml-auto flex-shrink-0">
                        <label for="currentPhase" class="block text-sm font-medium text-gray-700 mb-1 text-left md:text-right">Fase Activa RUP:</label>
                        <select id="currentPhase" x-model.number="selectedProject.current_phase" @@change="updateProjectPhase()" class="input-field w-full sm:w-56">
                            <template x-for="phase in phases" :key="phase.id">
                                <option :value="phase.id" x-text="phase.name"></option>
                            </template>
                        </select>
                    </div>
                </div>

                <div class="mt-10" x-show="selectedProject" x-transition:enter="fade-in-section">
                    @* SECCIÓN DE PESTAÑAS SIMPLIFICADA - SOLO DOCUMENTOS VISIBLE *@
                    <div class="border-b border-gray-300">
                        <nav class="-mb-px flex space-x-1 md:space-x-4 overflow-x-auto custom-scrollbar pb-1" aria-label="Tabs">
                            @* Solo la pestaña de Documentos, marcada como activa por defecto visualmente si se quiere *@
                            <button class="tab-button whitespace-nowrap active">
                                Documentos
                            </button>
                        </nav>
                    </div>

                    @* SECCIÓN DE ACTIVIDADES ELIMINADA *@

                    @* SECCIÓN DE DOCUMENTOS (SIEMPRE VISIBLE SI HAY PROYECTO) *@
                    <div class="tab-content mt-0">
                        @* Quitamos x-show="activeTab === 'documents'" *@
                        <h4 class="text-xl font-semibold mb-4 text-gray-700">Documentos de la Fase: <span x-text="getPhaseName(selectedProject.current_phase)" class="font-bold text-indigo-600"></span></h4>
                        <form @@submit.prevent="addDocument" id="documentForm" class="space-y-4 mb-6 bg-white p-6 rounded-lg border border-gray-200 shadow-md">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label for="docType" class="block text-sm font-medium text-gray-700">Tipo Documento RUP:</label>
                                    <select id="docType" x-model="newDocument.type_clave" class="input-field">
                                        <template x-for="docType in documentTypes" :key="docType.clave">
                                            <option :value="docType.clave" x-text="docType.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div>
                                    <label for="docVersion" class="block text-sm font-medium text-gray-700">Versión Inicial:</label>
                                    <input type="text" id="docVersion" x-model="newDocument.version" placeholder="Ej: 1.0" class="input-field">
                                </div>
                            </div>
                            <div>
                                <label for="docFile" class="block text-sm font-medium text-gray-700">Adjuntar Archivo:</label>
                                <input type="file" name="docFile" id="docFile" @@change="handleFileUpload" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
                                <p x-show="newDocument.file_name" class="text-xs text-gray-500 mt-1">Archivo: <span x-text="newDocument.file_name"></span></p>
                            </div>
                            <button type="submit" class="btn btn-primary w-full md:w-auto">Subir Documento</button>
                        </form>

                        <h5 class="text-lg font-semibold mb-3 text-gray-600">Documentos Adjuntos:</h5>
                        <div class="max-h-[500px] overflow-y-auto space-y-3 pr-2 custom-scrollbar">
                            <template x-for="doc in currentPhaseDocuments" :key="doc.id">
                                <div class="card mb-0 p-4 rounded-lg">
                                    <div class="flex justify-between items-start">
                                        <div class="mr-2">
                                            <p class="text-md font-semibold text-gray-800" x-text="getDocumentTypeName(doc.type)"></p>
                                            <p class="text-sm text-gray-500">Archivo: <span x-text="doc.file_name"></span></p>
                                            <p class="text-xs text-gray-500">Subido: <span x-text="formatDateTime(doc.uploaded_at) || 'N/A'"></span></p>
                                        </div>
                                        <span :class="getStatusClass(doc.status)" class="status-badge whitespace-nowrap" x-text="doc.status"></span>
                                    </div>
                                    <div class="mt-3 flex items-center space-x-3">
                                        <div>
                                            <label :for="'doc_status_'+doc.id" class="text-xs font-medium text-gray-600">Estado:</label>
                                            <select :id="'doc_status_'+doc.id" x-model="doc.status" @@change="updateDocumentStatus(doc)" class="input-field input-field-xs py-1">
                                                <template x-for="status_opt in documentStatuses" :key="status_opt">
                                                    <option :value="status_opt" x-text="status_opt"></option>
                                                </template>
                                            </select>
                                        </div>
                                        <div>
                                            <label :for="'doc_version_display_'+doc.id" class="text-xs font-medium text-gray-600">Versión:</label>
                                            <input type="text" :id="'doc_version_display_'+doc.id" :value="doc.version" readonly class="input-field input-field-xs py-1 w-24 bg-gray-100 cursor-not-allowed">
                                        </div>
                                        <div class="ml-auto">
                                            <button @@click="downloadDocument(doc.id, doc.file_name)"
                                                    title="Descargar Documento"
                                                    class="btn btn-secondary btn-xs">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </template>
                            <p x-show="currentPhaseDocuments.length === 0" class="text-sm text-gray-500 italic text-center py-6">No hay documentos para esta fase.</p>
                        </div>
                    </div>

                    @* SECCIÓN DE RESUMEN DE FASE ELIMINADA *@
                </div>
            </div>
        </main>

        <footer class="text-center text-sm text-gray-500 mt-12 pb-6">
            Gestor RUP por Fases © @DateTime.Now.Year - Aplicación MVC
        </footer>
    </div>
    <script>
    function app() {
        return {
            selectedProjectId: null,
            // ELIMINADO: activities
            documents: [],

            newDocument: { type_clave: '', file_name: '', file_data_obj: null, version: '1.0' },
            // ELIMINADO: newActivity

            phases: [],
            // ELIMINADO: roles
            documentTypes: [],
            // ELIMINADO: availableUsersForRole

            // ELIMINADO: activityStatuses
            documentStatuses: ['Pendiente', 'En Revisión', 'Validado', 'Obsoleto'],
            // ELIMINADO: activeTab (ya no se necesita para cambiar vistas)
            selectedProject: null,

            get currentPhaseDocuments() {
                if (!this.selectedProject) return [];
                return this.documents; // Asumiendo que this.documents solo tiene las de la fase/proyecto actual
            },

            async init() {
                console.log("Alpine init starting (Simplified Phase Mode)...");
                this.phases = @Html.Raw(Json.Encode(ViewBag.Phases ?? new List<object>()));
                // ELIMINADO: this.roles = ...
                this.documentTypes = @Html.Raw(Json.Encode(ViewBag.DocumentTypes ?? new List<object>()));

                const projectDataFromView = @Html.Raw(Json.Encode(ViewBag.SelectedProjectData));
                const projectIdFromView = @Html.Raw(Json.Encode(ViewBag.ProjectId));

                console.log("Project ID from ViewBag:", projectIdFromView);
                console.log("Project Data from ViewBag:", projectDataFromView);

                if (projectIdFromView && projectDataFromView) {
                    this.selectedProjectId = projectIdFromView;
                    this.selectedProject = projectDataFromView;
                    console.log("selectedProjectId set to:", this.selectedProjectId);
                    console.log("selectedProject set to:", this.selectedProject);

                    if (this.phases.length > 0 && (this.selectedProject.current_phase === 0 || !this.phases.find(p => p.id === this.selectedProject.current_phase))) {
                        console.warn("Project current_phase is invalid or 0. Defaulting if possible.");
                        if (this.phases.length > 0) {
                            this.selectedProject.current_phase = this.phases[0].id;
                        }
                    }

                    // ELIMINADO: Lógica de newActivity.context_role_id
                    if (this.documentTypes.length > 0 && !this.newDocument.type_clave) {
                        this.newDocument.type_clave = this.documentTypes[0].clave;
                    }
                    await this.loadProjectPhaseData();
                } else {
                    console.error("No se proporcionaron datos del proyecto a la vista RUP o son inválidos.");
                }
                console.log("Alpine init finished (Simplified Phase Mode).");
            },

            async loadProjectPhaseData() {
                console.log("loadProjectPhaseData called for project:", this.selectedProject);
                if (!this.selectedProject || this.selectedProject.current_phase === 0) {
                     console.warn("loadProjectPhaseData: selectedProject is null or current_phase is 0, aborting data load.");
                     // ELIMINADO: this.activities = [];
                     this.documents = [];
                     return;
                }
                // ELIMINADO: await this.fetchActivitiesForCurrentPhase();
                await this.fetchDocumentsForCurrentPhase();
                // ELIMINADO: this.activeTab = 'activities';
                console.log("Project phase data loaded.");
            },

            // ELIMINADO: fetchUsersForSelectedRole
            // ELIMINADO: addActivity
            // ELIMINADO: fetchActivitiesForCurrentPhase

            async fetchDocumentsForCurrentPhase() {
                if (!this.selectedProject || this.selectedProject.current_phase === 0) { this.documents = []; return; }
                console.log(`Fetching documents for project ${this.selectedProject.id}, phase ${this.selectedProject.current_phase}`);
                try {
                    const response = await fetch(`@Url.Action("GetDocumentsForPhase", "RUP")?projectId=${this.selectedProject.id}&phaseId=${this.selectedProject.current_phase}`);
                    if (!response.ok) throw new Error('Falló la carga de documentos');
                    this.documents = await response.json();
                    console.log("Documents fetched:", this.documents);
                } catch (error) { console.error("Error cargando documentos:", error); this.documents = []; alert("Error: " + error.message); }
            },

            async updateProjectPhase() {
                if (!this.selectedProject) return;
                console.log(`Updating project ${this.selectedProject.id} to phase ${this.selectedProject.current_phase}`);
                try {
                    const response = await fetch('@Url.Action("UpdateProjectPhase", "RUP")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ projectId: this.selectedProject.id, phaseId: this.selectedProject.current_phase })
                    });
                    const result = await response.json();
                    if (!response.ok || !result.success) throw new Error(result.message || 'Falló la actualización de fase');
                    await this.loadProjectPhaseData();
                } catch (error) { console.error("Error actualizando fase del proyecto:", error); alert("Error: " + error.message); }
            },

            // ELIMINADO: updateActivityStatus

            handleFileUpload(event) {
                const file = event.target.files[0];
                if (file) { this.newDocument.file_name = file.name; this.newDocument.file_data_obj = file; }
                else { this.newDocument.file_name = ''; this.newDocument.file_data_obj = null; }
            },

            async addDocument() {
                if (!this.newDocument.file_data_obj || !this.selectedProject || !this.newDocument.type_clave) {
                    alert("Por favor, complete todos los campos y seleccione un archivo."); return;
                }
                const formData = new FormData();
                formData.append('ProjectId', this.selectedProject.id);
                formData.append('PhaseId', this.selectedProject.current_phase);
                formData.append('TypeClave', this.newDocument.type_clave);
                formData.append('Version', this.newDocument.version);
                formData.append('docFile', this.newDocument.file_data_obj);
                try {
                    const response = await fetch('@Url.Action("CreateDocument", "RUP")', { method: 'POST', body: formData });
                    const result = await response.json();
                    if (!response.ok || !result.success) throw new Error(result.message || 'Falló la subida del documento');

                    this.documents.push(result);
                    this.newDocument = { type_clave: (this.documentTypes.length > 0 ? this.documentTypes[0].clave : ''), file_name: '', file_data_obj: null, version: '1.0' };
                    document.getElementById('docFile').value = null;
                } catch (error) { console.error("Error añadiendo documento:", error); alert("Error: " + error.message); }
            },

            async updateDocumentStatus(docToUpdate) {
                const localDoc = this.documents.find(d => d.id === docToUpdate.id);
                if (!localDoc) {
                    console.error("Cannot update status, document not found locally:", docToUpdate.id);
                    return;
                }
                const originalStatus = localDoc.status;
                localDoc.status = docToUpdate.status;

                try {
                    const response = await fetch('@Url.Action("UpdateDocumentStatus", "RUP")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ documentId: docToUpdate.id, status: docToUpdate.status })
                    });
                    const result = await response.json();
                    if (!response.ok || !result.success) {
                        if(localDoc) localDoc.status = originalStatus;
                        throw new Error(result.message || 'Falló la actualización del estado del documento');
                    }
                } catch (error) {
                    console.error("Error actualizando estado de documento:", error);
                    alert("Error: " + error.message);
                    if(localDoc) localDoc.status = originalStatus;
                }
            },
            downloadDocument(documentId, originalFileName) {
                try {
                    const downloadUrl = `@Url.Action("DownloadDocument", "RUP")?documentId=${documentId}`;
                    window.location.href = downloadUrl;
                } catch (error) {
                    console.error("Error al iniciar descarga de documento:", error);
                    alert("Error al iniciar la descarga del documento: " + error.message);
                }
            },
            getPhaseName(phaseId) {
                const phase = this.phases.find(p => p.id === phaseId);
                return phase ? phase.name : 'N/A';
            },
            // ELIMINADO: getRoleName
            getDocumentTypeName(docTypeClave) {
                const docType = this.documentTypes.find(dt => dt.clave === docTypeClave);
                return docType ? docType.name : 'N/A';
            },
            getStatusClass(status) {
                switch (status) {
                    case 'Pendiente': return 'status-badge status-pending';
                    case 'En Progreso': return 'status-badge status-in-progress'; // Puede ser útil si los docs pasan por progreso
                    case 'Completada': return 'status-badge status-completed'; // Puede ser útil
                    case 'En Revisión': return 'status-badge status-in-review';
                    case 'Validado': return 'status-badge status-validated';
                    case 'Bloqueada': return 'status-badge status-pending';
                    case 'Obsoleto': return 'status-badge status-cancelled';
                    default: return 'status-badge bg-gray-200 text-gray-700';
                }
            },
            formatDateTime(isoString) {
                if (!isoString) return null;
                try {
                    let date = new Date(isoString);
                    if (isNaN(date.getTime())) {
                        const msDateMatch = isoString.match(/\/Date\((\d+)\)\//);
                        if (msDateMatch && msDateMatch[1]) {
                            date = new Date(parseInt(msDateMatch[1]));
                        } else {
                            return "Fecha Inválida";
                        }
                    }
                    if (isNaN(date.getTime())) return "Fecha Inválida";
                    return date.toLocaleString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });
                } catch (e) {
                    console.warn("Error formateando fecha:", isoString, e);
                    return "Fecha Inválida";
                }
            }
        }
    }
    </script>
    <style>
        .btn {
            padding: 0.5rem 1rem;
            border-radius: 0.375rem;
            font-weight: 600;
            transition: background-color 0.2s;
            cursor: pointer;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .btn-primary {
            background-color: #2563eb;
            color: white;
        }

            .btn-primary:hover {
                background-color: #1d4ed8;
            }

        .btn-secondary {
            background-color: #6b7280;
            color: white;
        }

            .btn-secondary:hover {
                background-color: #4b5563;
            }

        .btn-sm {
            padding: 0.4rem 0.8rem;
            font-size: 0.875rem;
        }

        .btn-xs {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

        .input-field {
            width: 100%;
            padding: 0.5rem 0.75rem;
            border: 1px solid #d1d5db;
            border-radius: 0.375rem;
            box-shadow: inset 0 1px 2px 0 rgba(0,0,0,0.05);
        }

            .input-field:focus {
                border-color: #2563eb;
                outline: 2px solid transparent;
                outline-offset: 2px;
                box-shadow: 0 0 0 2px #bfdbfe;
            }

        .input-field-sm {
            padding: 0.4rem 0.6rem;
            font-size: 0.875rem;
        }

        .input-field-xs {
            padding: 0.25rem 0.5rem;
            font-size: 0.75rem;
        }

        .card {
            background-color: white;
            border: 1px solid #e5e7eb;
            box-shadow: 0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px 0 rgba(0,0,0,0.06);
        }

        /* ELIMINADO: .activity-card y sus :hover */

        .status-badge {
            padding: 0.2em 0.6em;
            border-radius: 9999px;
            font-size: 0.75rem;
            font-weight: 600;
            display: inline-block;
            line-height: 1.2;
        }

        .status-pending {
            background-color: #fef3c7;
            color: #92400e;
        }

        .status-in-progress {
            background-color: #dbeafe;
            color: #1e40af;
        }

        .status-completed {
            background-color: #d1fae5;
            color: #065f46;
        }

        .status-in-review {
            background-color: #ede9fe;
            color: #5b21b6;
        }

        .status-validated {
            background-color: #ccfbf1;
            color: #0f766e;
        }

        .status-cancelled {
            background-color: #fee2e2;
            color: #991b1b;
        }
        /* ELIMINADO: .status-planned, .status-active (usados por iteraciones/fases antes) */

        .tab-button {
            padding: 0.75rem 1rem;
            font-size: 0.875rem;
            font-weight: 500;
            color: #4b5563;
            border-bottom: 2px solid transparent;
        }

            .tab-button:hover {
                color: #1f2937;
                border-bottom-color: #d1d5db;
            }

            .tab-button.active { /* Para dar estilo a la única pestaña de "Documentos" si se desea */
                color: #2563eb;
                border-bottom-color: #2563eb;
                font-weight: 600;
            }

        .tab-content {
            padding-top: 1.5rem;
        }

        [x-cloak] {
            display: none !important;
        }

        .fade-in-section {
            transition: opacity 0.5s ease-out;
        }

        .custom-scrollbar::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }

        .custom-scrollbar::-webkit-scrollbar-track {
            background: #f1f1f1;
            border-radius: 10px;
        }

        .custom-scrollbar::-webkit-scrollbar-thumb {
            background: #c7c7c7;
            border-radius: 10px;
        }

            .custom-scrollbar::-webkit-scrollbar-thumb:hover {
                background: #a3a3a3;
            }

        .custom-scrollbar {
            scrollbar-width: thin;
            scrollbar-color: #c7c7c7 #f1f1f1;
        }

        /* ELIMINADO: .activities-grid, .activity-title, .activity-status, .activity-details p */
        /* ELIMINADO: .iteration-summary-card, .iteration-summary-grid, .summary-item */
    </style>
</body>