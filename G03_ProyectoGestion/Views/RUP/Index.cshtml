
<style>
    [x-cloak] {
        display: none !important;
    }

    .tab-button {
        padding: 0.75rem 1.5rem;
        cursor: pointer;
        border: 1px solid transparent;
        border-bottom: none;
        margin-right: 0.25rem;
        font-weight: 500;
        color: #4B5563;
    }

        .tab-button.active {
            background-color: white;
            border-color: #D1D5DB;
            border-bottom: 1px solid white;
            margin-bottom: -1px;
            color: #3B82F6;
        }

    .tab-content {
        padding: 1.5rem;
        border: 1px solid #D1D5DB;
        background-color: #F9FAFB;
    }

    .input-field {
        margin-top: 0.25rem;
        display: block;
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: 1px solid #D1D5DB;
        border-radius: 0.375rem;
        box-shadow: inset 0 1px 2px 0 rgba(0, 0, 0, 0.05);
    }

        .input-field:focus {
            outline: none;
            border-color: #2563EB;
            box-shadow: 0 0 0 0.2rem rgba(59, 130, 246, 0.25);
        }

    .input-field-sm {
        padding: 0.4rem 0.6rem;
        font-size: 0.875rem;
    }

    .input-field-xs {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .btn {
        padding: 0.6rem 1.2rem;
        border-radius: 0.375rem;
        font-weight: 600;
        transition: background-color 0.2s ease-in-out, box-shadow 0.2s ease-in-out, transform 0.2s ease-in-out;
    }

    .btn-sm {
        padding: 0.4rem 0.8rem;
        font-size: 0.875rem;
    }

    .btn-xs {
        padding: 0.25rem 0.5rem;
        font-size: 0.75rem;
    }

    .btn-primary {
        background-color: #3B82F6;
        color: white;
    }

        .btn-primary:hover {
            background-color: #2563EB;
        }

    .btn-secondary {
        background-color: #6B7280;
        color: white;
    }

        .btn-secondary:hover {
            background-color: #4B5563;
        }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 9999px;
        font-size: 0.75rem;
        font-weight: 600;
    }

    .status-pending {
        background-color: #FEF3C7;
        color: #92400E;
    }

    .status-in-progress {
        background-color: #DBEAFE;
        color: #1D4ED8;
    }

    .status-completed {
        background-color: #D1FAE5;
        color: #065F46;
    }

    .status-in-review {
        background-color: #E0E7FF;
        color: #3730A3;
    }

    .status-validated {
        background-color: #C6F6D5;
        color: #2F855A;
    }

    .status-planned {
        background-color: #E5E7EB;
        color: #4B5563;
    }

    .status-active {
        background-color: #BBF7D0;
        color: #15803D;
    }

    .status-cancelled {
        background-color: #FECACA;
        color: #B91C1C;
    }

    .card {
        background-color: white;
        padding: 1rem;
        border-radius: 0.375rem;
        border: 1px solid #E5E7EB;
        box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
        margin-bottom: 1rem;
    }

    .custom-scrollbar::-webkit-scrollbar {
        width: 8px;
        height: 8px;
    }

    .custom-scrollbar::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 10px;
    }

    .custom-scrollbar::-webkit-scrollbar-thumb {
        background: #c4c4c4;
        border-radius: 10px;
    }

        .custom-scrollbar::-webkit-scrollbar-thumb:hover {
            background: #a3a3a3;
        }

    /* Nuevos estilos para los cambios solicitados */
    .iteration-container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
        position: relative;
    }

    @@media (min-width: 768px) {
        .iteration-container {
            grid-template-columns: 1fr 1fr;
            gap: 0;
        }

            .iteration-container::before {
                content: '';
                position: absolute;
                left: 50%;
                top: 0;
                bottom: 0;
                width: 1px;
                background-color: #E5E7EB;
                transform: translateX(-50%);
                z-index: 10;
            }
    }

    @@media (min-width: 1281px) {
        .iteration-container {
            grid-template-columns: 1fr 1fr;
            gap: 0;
        }

            .iteration-container::before {
                content: '';
                position: absolute;
                left: 50%;
                top: 0;
                bottom: 0;
                width: 1px;
                background-color: #E5E7EB;
                transform: translateX(-50%);
                z-index: 10;
            }
    }

    .iteration-box {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    .selected-iteration {
        border: 2px solid #22c55e !important;
        background-color: rgba(34, 197, 94, 0.05);
    }

    .activities-grid {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        gap: 1rem;
    }

    @@media (min-width: 768px) {
        .activities-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (min-width: 1024px) {
        .activities-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    /* Añadir estos nuevos estilos al bloque <style> existente */

    .iteration-summary-card {
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        padding: 1.5rem;
    }

    .iteration-summary-grid {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 1rem;
        width: 100%;
        margin-top: 1rem;
    }

    .summary-item {
        display: flex;
        flex-direction: column;
        align-items: center;
        padding: 0.75rem;
        background-color: rgba(255, 255, 255, 0.7);
        border-radius: 0.5rem;
        box-shadow: 0 1px 2px rgba(0, 0, 0, 0.05);
    }

        .summary-item strong {
            font-size: 0.875rem;
            color: #4B5563;
            margin-bottom: 0.25rem;
        }

        .summary-item span {
            font-weight: 500;
            color: #1F2937;
        }

    .activity-card {
        display: flex;
        flex-direction: column;
        width: 100%;
        transition: all 0.3s ease;
    }

        .activity-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

    .activity-status {
        align-self: flex-start;
        margin-bottom: 0.5rem;
    }

    .activity-title {
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .activity-details {
        margin-top: 0.5rem;
        font-size: 0.875rem;
    }

    /* Eliminar la animación de salto en la clase .selected-iteration */
    @@keyframes selectAnimation {
        0% {
            transform: scale(1);
            box-shadow: 0 0 0 rgba(34, 197, 94, 0);
        }

        50% {
            transform: scale(1.03);
            box-shadow: 0 0 15px rgba(34, 197, 94, 0.4);
        }

        100% {
            transform: scale(1);
            box-shadow: 0 0 5px rgba(34, 197, 94, 0.2);
        }
    }

    .selected-iteration {
        border: 2px solid #22c55e !important;
        background-color: rgba(34, 197, 94, 0.05);
        animation: selectAnimation 0.6s ease;
    }

    /* Reemplazar con esta versión sin animación de salto */
    .selected-iteration {
        border: 2px solid #22c55e !important;
        background-color: rgba(34, 197, 94, 0.05);
        transition: border-color 0.3s ease, background-color 0.3s ease;
    }

    /* Añadir una clase para la animación de desvanecimiento de la sección de actividades */
    @@keyframes fadeIn {
        from {
            opacity: 0;
        }

        to {
            opacity: 1;
        }
    }

    .fade-in-section {
        animation: fadeIn 0.5s ease-in-out;
    }

    /* Modificar el estilo de los contenedores de iteración para que usen flexbox con una altura fija */
    .iteration-container {
        display: grid;
        grid-template-columns: 1fr;
        gap: 1rem;
        position: relative;
        min-height: 450px; /* Altura mínima para evitar cambios bruscos */
    }

    @@media (min-width: 1281px) {
        .iteration-container {
            grid-template-columns: 1fr 1fr;
            gap: 0;
        }

            .iteration-container::before {
                content: '';
                position: absolute;
                left: 50%;
                top: 0;
                bottom: 0;
                width: 1px;
                background-color: #E5E7EB;
                transform: translateX(-50%);
                z-index: 10;
            }
    }

    .iteration-box {
        height: 100%;
        display: flex;
        flex-direction: column;
    }

        /* Asegurar que los formularios y listas de iteración se adapten al espacio disponible */
        .iteration-box form,
        .iteration-box > div {
            display: flex;
            flex-direction: column;
            flex-grow: 1;
        }

        .iteration-box form {
            min-height: 320px;
        }

        /* Asegurar que la lista de iteraciones ocupe todo el espacio */
        .iteration-box > div > div.space-y-4 {
            flex-grow: 1;
            overflow-y: auto;
        }

    .activities-grid {
        display: grid;
        grid-template-columns: repeat(1, 1fr);
        gap: 1rem;
        width: 100%;
    }

    @@media (min-width: 768px) {
        .activities-grid {
            grid-template-columns: repeat(2, 1fr);
        }
    }

    @@media (min-width: 1024px) {
        .activities-grid {
            grid-template-columns: repeat(3, 1fr);
        }
    }

    /* Limitar el tamaño del textarea para objetivo */
    #iterationObjective {
        min-height: 80px;
        max-height: 120px;
        resize: vertical;
    }

    /* Asegurar que la lista de iteraciones tenga scroll y altura fija */
    .iterations-list {
        max-height: 400px;
        overflow-y: auto;
    }

    /* Eliminar la línea divisoria en resoluciones pequeñas */
    .iteration-container::before {
        display: none;
    }

    @@media (min-width: 1281px) {
        .iteration-container::before {
            display: block;
        }
    }
</style>


@{
    ViewBag.Title = "Gestor RUP por Fases"; // Cambiado
}

<script src="https://cdn.tailwindcss.com"></script>
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>

<body class="bg-gray-100 text-gray-800" x-data="app()">
    <div class="container mx-auto p-4">
        <header class="bg-blue-600 text-white p-6 rounded-t-lg shadow-lg mb-6">
            <h1 class="text-4xl font-bold">Gestor RUP por Fases</h1> @* Cambiado *@
            <p class="text-blue-100" x-show="selectedProject" x-text="`Gestionando Proyecto: ${selectedProject.name}`"></p>
            <p class="text-blue-100" x-show="!selectedProject">Cargando datos del proyecto...</p>
        </header>

        @if (TempData["ErrorMessage"] != null)
        {
            <div class="my-4 p-4 bg-red-100 border-l-4 border-red-500 text-red-700 rounded-md shadow" role="alert">
                <p class="font-bold">Error</p>
                <p>@TempData["ErrorMessage"]</p>
            </div>
        }

        <main x-show="selectedProjectId" x-cloak class="p-6 bg-white rounded-lg shadow-lg">
            <div class="mb-6 flex justify-start">
                <a href="@Url.Action("Index", "Proyecto")" class="btn btn-secondary text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 inline-block mr-1" viewBox="0 0 20 20" fill="currentColor"><path fill-rule="evenodd" d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z" clip-rule="evenodd" /></svg>
                    Volver a Mis Proyectos
                </a>
            </div>

            <div x-show="selectedProject">
                <div class="flex flex-col md:flex-row items-center justify-between mb-10 p-6 bg-gray-50 rounded-lg shadow-md">
                    <div class="flex-grow text-center md:text-left md:pr-6 w-full md:w-auto mb-4 md:mb-0">
                        <h2 class="text-3xl lg:text-4xl font-bold text-blue-700" x-text="selectedProject.name"></h2>
                        <p class="text-gray-600 mt-1 text-sm lg:text-base"><strong class="font-medium">Descripción:</strong> <span x-text="selectedProject.scope"></span></p>
                    </div>
                    <div class="md:ml-auto flex-shrink-0">
                        <label for="currentPhase" class="block text-sm font-medium text-gray-700 mb-1 text-left md:text-right">Fase Activa RUP:</label>
                        <select id="currentPhase" x-model.number="selectedProject.current_phase" @@change="updateProjectPhase()" class="input-field w-full sm:w-56">
                            <template x-for="phase in phases" :key="phase.id">
                                <option :value="phase.id" x-text="phase.name"></option>
                            </template>
                        </select>
                    </div>
                </div>

                @* SECCIÓN DE ITERACIONES ELIMINADA *@

                @* Ya no se necesita la advertencia de "seleccione una iteración" *@

                <div class="mt-10" x-show="selectedProject" x-transition:enter="fade-in-section">
                    @* Mostrar siempre si hay proyecto seleccionado *@
                    <div class="border-b border-gray-300">
                        <nav class="-mb-px flex space-x-1 md:space-x-4 overflow-x-auto custom-scrollbar pb-1" aria-label="Tabs">
                            <button @@click="activeTab = 'activities'" :class="{ 'active': activeTab === 'activities' }" class="tab-button whitespace-nowrap">
                                Actividades
                            </button>
                            <button @@click="activeTab = 'documents'" :class="{ 'active': activeTab === 'documents' }" class="tab-button whitespace-nowrap">
                                Documentos
                            </button>
                            <button @@click="activeTab = 'overview_phase'" :class="{ 'active': activeTab === 'overview_phase' }" class="tab-button whitespace-nowrap">
                                Resumen Fase @* Cambiado *@
                            </button>
                        </nav>
                    </div>

                    <div x-show="activeTab === 'activities'" class="tab-content mt-0">
                        <h4 class="text-xl font-semibold mb-4 text-gray-700">Actividades de la Fase: <span x-text="getPhaseName(selectedProject.current_phase)" class="font-bold text-indigo-600"></span></h4>
                        <form @@submit.prevent="addActivity" class="space-y-4 mb-6 bg-white p-6 rounded-lg border border-gray-200 shadow-md">
                            <div>
                                <label for="actDesc" class="block text-sm font-medium text-gray-700">Descripción:</label>
                                <input type="text" id="actDesc" x-model="newActivity.description" required class="input-field">
                            </div>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label for="actContextRole" class="block text-sm font-medium text-gray-700">Rol Principal de la Actividad:</label>
                                    <select id="actContextRole" x-model.number="newActivity.context_role_id" @@change="fetchUsersForSelectedRole()" class="input-field">
                                        <option value="">-- Seleccione Rol --</option>
                                        <template x-for="role in roles" :key="role.id">
                                            <option :value="role.id" x-text="role.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div>
                                    <label for="actAssignedUsersList" class="block text-sm font-medium text-gray-700">Asignar Usuarios (de este rol):</label>
                                    <div id="actAssignedUsersList" class="mt-1 p-2 border border-gray-300 rounded-md max-h-36 overflow-y-auto space-y-2 bg-white custom-scrollbar"
                                         :class="(!newActivity.context_role_id || availableUsersForRole.length === 0) ? 'bg-gray-100 cursor-not-allowed' : ''">
                                        <template x-if="newActivity.context_role_id && availableUsersForRole.length > 0">
                                            <template x-for="user in availableUsersForRole" :key="user.id">
                                                <label class="flex items-center space-x-2 p-1 hover:bg-gray-50 rounded text-sm cursor-pointer">
                                                    <input type="checkbox"
                                                           :value="user.id"
                                                           x-model="newActivity.selected_user_ids"
                                                           class="form-checkbox h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                                                    <span x-text="user.name"></span>
                                                </label>
                                            </template>
                                        </template>
                                        <template x-if="newActivity.context_role_id && availableUsersForRole.length === 0">
                                            <p class="text-xs text-gray-500 px-1 py-2">No hay usuarios con este rol.</p>
                                        </template>
                                        <template x-if="!newActivity.context_role_id">
                                            <p class="text-xs text-gray-500 px-1 py-2">Seleccione un rol primero para ver usuarios.</p>
                                        </template>
                                    </div>
                                </div>
                            </div>
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label for="actStatus" class="block text-sm font-medium text-gray-700">Estado Inicial:</label>
                                    <select id="actStatus" x-model="newActivity.status" class="input-field">
                                        <template x-for="status_opt in activityStatuses" :key="status_opt">
                                            <option :value="status_opt" x-text="status_opt"></option>
                                        </template>
                                    </select>
                                </div>
                                <div>
                                    <label for="actDueDate" class="block text-sm font-medium text-gray-700">Fecha Límite:</label>
                                    <input type="date" id="actDueDate" x-model="newActivity.due_date" class="input-field">
                                </div>
                            </div>
                            <button type="submit" class="btn btn-primary w-full md:w-auto">Añadir Actividad</button>
                        </form>

                        <h5 class="text-lg font-semibold mb-3 text-gray-600">Actividades Registradas:</h5>
                        <div class="max-h-[500px] overflow-y-auto pr-2 activities-grid custom-scrollbar">
                            <template x-for="activity in currentPhaseActivities" :key="activity.id">
                                @* Cambiado *@
                                <div class="card mb-0 p-4 rounded-lg activity-card">
                                    <span :class="getStatusClass(activity.status)" class="status-badge whitespace-nowrap activity-status" x-text="activity.status"></span>
                                    <p class="text-md font-semibold text-gray-800 activity-title" x-text="activity.description"></p>
                                    <div class="activity-details">
                                        <p class="text-sm text-gray-500 mt-2">Rol Actividad: <strong x-text="getRoleName(activity.assigned_role)"></strong></p>
                                        <div class="text-sm text-gray-600 mt-1">
                                            Asignado a:
                                            <template x-if="activity.assigned_users && activity.assigned_users.length > 0">
                                                <span x-text="activity.assigned_users.map(u => u.name).join(', ')"></span>
                                            </template>
                                            <template x-if="!activity.assigned_users || activity.assigned_users.length === 0">
                                                <span class="italic text-gray-400">Nadie asignado</span>
                                            </template>
                                        </div>
                                        <p class="text-xs text-gray-500 mt-1">Límite: <span x-text="activity.due_date || 'N/A'"></span></p>
                                    </div>
                                    <div class="mt-3">
                                        <label :for="'act_status_'+activity.id" class="text-xs font-medium text-gray-600">Cambiar Estado:</label>
                                        <select :id="'act_status_'+activity.id" x-model="activity.status" @@change="updateActivityStatus(activity)" class="input-field input-field-xs py-1">
                                            <template x-for="status_opt in activityStatuses" :key="status_opt">
                                                <option :value="status_opt" x-text="status_opt"></option>
                                            </template>
                                        </select>
                                    </div>
                                </div>
                            </template>
                            <p x-show="currentPhaseActivities.length === 0" class="text-sm text-gray-500 italic text-center py-6 md:col-span-3">No hay actividades para esta fase.</p> @* Cambiado *@
                        </div>
                    </div>

                    <div x-show="activeTab === 'documents'" class="tab-content mt-0">
                        <h4 class="text-xl font-semibold mb-4 text-gray-700">Documentos de la Fase: <span x-text="getPhaseName(selectedProject.current_phase)" class="font-bold text-indigo-600"></span></h4>
                        <form @@submit.prevent="addDocument" id="documentForm" class="space-y-4 mb-6 bg-white p-6 rounded-lg border border-gray-200 shadow-md">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                <div>
                                    <label for="docType" class="block text-sm font-medium text-gray-700">Tipo Documento RUP:</label>
                                    <select id="docType" x-model="newDocument.type_clave" class="input-field">
                                        <template x-for="docType in documentTypes" :key="docType.clave">
                                            <option :value="docType.clave" x-text="docType.name"></option>
                                        </template>
                                    </select>
                                </div>
                                <div>
                                    <label for="docVersion" class="block text-sm font-medium text-gray-700">Versión Inicial:</label>
                                    <input type="text" id="docVersion" x-model="newDocument.version" placeholder="Ej: 1.0" class="input-field">
                                </div>
                            </div>
                            <div>
                                <label for="docFile" class="block text-sm font-medium text-gray-700">Adjuntar Archivo:</label>
                                <input type="file" name="docFile" id="docFile" @@change="handleFileUpload" class="mt-1 block w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100">
                                <p x-show="newDocument.file_name" class="text-xs text-gray-500 mt-1">Archivo: <span x-text="newDocument.file_name"></span></p>
                            </div>
                            <button type="submit" class="btn btn-primary w-full md:w-auto">Subir Documento</button>
                        </form>

                        <h5 class="text-lg font-semibold mb-3 text-gray-600">Documentos Adjuntos:</h5>
                        <div class="max-h-[500px] overflow-y-auto space-y-3 pr-2 custom-scrollbar">
                            <template x-for="doc in currentPhaseDocuments" :key="doc.id">
                                @* Cambiado *@
                                <div class="card mb-0 p-4 rounded-lg">
                                    <div class="flex justify-between items-start">
                                        <div class="mr-2">
                                            <p class="text-md font-semibold text-gray-800" x-text="getDocumentTypeName(doc.type)"></p>
                                            <p class="text-sm text-gray-500">Archivo: <span x-text="doc.file_name"></span></p>
                                            <p class="text-xs text-gray-500">Subido: <span x-text="formatDateTime(doc.uploaded_at) || 'N/A'"></span></p>
                                        </div>
                                        <span :class="getStatusClass(doc.status)" class="status-badge whitespace-nowrap" x-text="doc.status"></span>
                                    </div>
                                    <div class="mt-3 flex items-center space-x-3">
                                        <div>
                                            <label :for="'doc_status_'+doc.id" class="text-xs font-medium text-gray-600">Estado:</label>
                                            <select :id="'doc_status_'+doc.id" x-model="doc.status" @@change="updateDocumentStatus(doc)" class="input-field input-field-xs py-1">
                                                <template x-for="status_opt in documentStatuses" :key="status_opt">
                                                    <option :value="status_opt" x-text="status_opt"></option>
                                                </template>
                                            </select>
                                        </div>
                                        <div>
                                            <label :for="'doc_version_display_'+doc.id" class="text-xs font-medium text-gray-600">Versión:</label>
                                            <input type="text" :id="'doc_version_display_'+doc.id" :value="doc.version" readonly class="input-field input-field-xs py-1 w-24 bg-gray-100 cursor-not-allowed">
                                        </div>
                                        <div class="ml-auto">
                                            <button @@click="downloadDocument(doc.id, doc.file_name)"
                                                    title="Descargar Documento"
                                                    class="btn btn-secondary btn-xs">
                                                <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline-block" viewBox="0 0 20 20" fill="currentColor">
                                                    <path fill-rule="evenodd" d="M3 17a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm3.293-7.707a1 1 0 011.414 0L9 10.586V3a1 1 0 112 0v7.586l1.293-1.293a1 1 0 111.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z" clip-rule="evenodd" />
                                                </svg>
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </template>
                            <p x-show="currentPhaseDocuments.length === 0" class="text-sm text-gray-500 italic text-center py-6">No hay documentos para esta fase.</p> @* Cambiado *@
                        </div>
                    </div>

                    <div x-show="activeTab === 'overview_phase'" class="tab-content mt-0">
                        @* Cambiado *@
                        <h4 class="text-xl font-semibold mb-4 text-gray-700">
                            Resumen de la Fase: <span x-text="getPhaseName(selectedProject.current_phase)" class="font-bold text-indigo-600"></span> @* Cambiado *@
                        </h4>
                        <div class="card mb-6 p-4 rounded-lg iteration-summary-card">
                            @* Puede mantener esta clase o cambiarla por phase-summary-card *@
                            <div class="iteration-summary-grid">
                                @* Puede mantener esta clase o cambiarla *@
                                <div class="summary-item">
                                    <strong>Proyecto:</strong>
                                    <span x-text="selectedProject.name"></span>
                                </div>
                                <div class="summary-item">
                                    <strong>Fase RUP Actual:</strong>
                                    <span x-text="getPhaseName(selectedProject.current_phase)"></span>
                                </div>
                                @* Ya no hay objetivo de iteración ni fechas de iteración *@
                            </div>
                        </div>

                        <div class="card mt-4 p-4 rounded-lg">
                            <h5 class="font-semibold text-gray-600 mb-3">Detalle de Actividades</h5>
                            <template x-if="currentPhaseActivities.length > 0">
                                @* Cambiado *@
                                <div class="activities-grid max-h-96 overflow-y-auto pr-1 custom-scrollbar">
                                    <template x-for="activity in currentPhaseActivities" :key="activity.id">
                                        @* Cambiado *@
                                        <div class="py-3 px-4 bg-slate-50 rounded-lg border border-gray-200 hover:shadow-md transition-shadow activity-card">
                                            <span :class="getStatusClass(activity.status)" class="status-badge whitespace-nowrap activity-status" x-text="activity.status"></span>
                                            <p class="font-medium text-gray-700 text-sm activity-title" x-text="activity.description" :title="activity.description"></p>
                                            <div class="text-xs text-gray-500 mt-2 space-y-0.5 activity-details">
                                                <p><strong>Rol:</strong> <span x-text="getRoleName(activity.assigned_role)"></span></p>
                                                <p><strong>Asignados:</strong> <span x-text="activity.assigned_users && activity.assigned_users.length > 0 ? activity.assigned_users.map(u => u.name).join(', ') : 'N/A'"></span></p>
                                            </div>
                                        </div>
                                    </template>
                                </div>
                            </template>
                            <p x-show="currentPhaseActivities.length === 0" class="text-sm text-gray-500 italic mt-2">No hay actividades en esta fase.</p> @* Cambiado *@
                        </div>

                        <div class="mt-6 grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div class="card mb-0 p-4 rounded-lg">
                                <h5 class="font-semibold text-gray-600 mb-2">Progreso de Actividades</h5>
                                <p class="text-sm text-gray-500">Total: <span x-text="currentPhaseActivities.length"></span></p> @* Cambiado *@
                                <p class="text-sm text-green-600">Completadas: <span x-text="currentPhaseActivities.filter(a => a.status === 'Completada').length"></span></p> @* Cambiado *@
                            </div>
                            <div class="card mb-0 p-4 rounded-lg">
                                <h5 class="font-semibold text-gray-600 mb-2">Estado de Documentos</h5>
                                <p class="text-sm text-gray-500">Total: <span x-text="currentPhaseDocuments.length"></span></p> @* Cambiado *@
                                <p class="text-sm text-green-600">Validados: <span x-text="currentPhaseDocuments.filter(d => d.status === 'Validado').length"></span></p> @* Cambiado *@
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </main>

        <footer class="text-center text-sm text-gray-500 mt-12 pb-6">
            Gestor RUP por Fases © @DateTime.Now.Year - Aplicación MVC @* Cambiado *@
        </footer>
    </div>
    <script>
    function app() {
        return {
            selectedProjectId: null,
            // ELIMINADO: iterations, selectedIterationId, newIteration
            activities: [],
            documents: [],

            newDocument: { type_clave: '', file_name: '', file_data_obj: null, version: '1.0' },
            newActivity: { description: '', context_role_id: null, selected_user_ids: [], status: 'Pendiente', due_date: '' },

            phases: [],
            roles: [],
            documentTypes: [],
            availableUsersForRole: [],

            activityStatuses: ['Pendiente', 'En Progreso', 'Completada', 'Bloqueada', 'En Revisión'],
            documentStatuses: ['Pendiente', 'En Revisión', 'Validado', 'Obsoleto'],
            // ELIMINADO: iterationStatuses
            activeTab: 'activities',
            selectedProject: null,

            // ELIMINADO: selectedIteration

            get currentPhaseActivities() { // Cambiado
                if (!this.selectedProject) return [];
                // Las actividades ya se filtran por proyecto y fase en el backend
                // Pero si el array 'activities' contiene de múltiples fases (no debería con la lógica actual), se necesitaría filtrar aquí:
                // return this.activities.filter(act => act.project_id === this.selectedProject.id && act.phase_id === this.selectedProject.current_phase);
                return this.activities; // Asumiendo que this.activities solo tiene las de la fase/proyecto actual
            },
            get currentPhaseDocuments() { // Cambiado
                if (!this.selectedProject) return [];
                // Similar a activities
                // return this.documents.filter(doc => doc.project_id === this.selectedProject.id && doc.phase_id === this.selectedProject.current_phase);
                return this.documents;
            },

            async init() {
                console.log("Alpine init starting (Phase Mode)...");
                this.phases = @Html.Raw(Json.Encode(ViewBag.Phases ?? new List<object>()));
                this.roles = @Html.Raw(Json.Encode(ViewBag.Roles ?? new List<object>()));
                this.documentTypes = @Html.Raw(Json.Encode(ViewBag.DocumentTypes ?? new List<object>()));

                const projectDataFromView = @Html.Raw(Json.Encode(ViewBag.SelectedProjectData));
                const projectIdFromView = @Html.Raw(Json.Encode(ViewBag.ProjectId));

                console.log("Project ID from ViewBag:", projectIdFromView);
                console.log("Project Data from ViewBag:", projectDataFromView);

                if (projectIdFromView && projectDataFromView) {
                    this.selectedProjectId = projectIdFromView;
                    this.selectedProject = projectDataFromView;
                    console.log("selectedProjectId set to:", this.selectedProjectId);
                    console.log("selectedProject set to:", this.selectedProject);

                    if (this.phases.length > 0 && (this.selectedProject.current_phase === 0 || !this.phases.find(p => p.id === this.selectedProject.current_phase))) {
                        // Si la fase actual no es válida o es 0, y hay fases disponibles, se asigna la primera.
                        // Esto también debería manejarse en el backend al cargar el proyecto.
                        console.warn("Project current_phase is invalid or 0. Defaulting if possible.");
                        if (this.phases.length > 0) {
                            this.selectedProject.current_phase = this.phases[0].id;
                            // Idealmente, esto se informa al backend, pero updateProjectPhase() lo hará si el usuario cambia.
                            // O el backend ya lo corrigió como se añadió en el controlador.
                        }
                    }


                    if (this.roles.length > 0 && this.newActivity.context_role_id === null) {
                        this.newActivity.context_role_id = null; // Mantener "Seleccione Rol"
                    }
                    if (this.documentTypes.length > 0 && !this.newDocument.type_clave) {
                        this.newDocument.type_clave = this.documentTypes[0].clave;
                    }
                    await this.loadProjectPhaseData();
                } else {
                    console.error("No se proporcionaron datos del proyecto a la vista RUP o son inválidos.");
                }
                console.log("Alpine init finished (Phase Mode).");
            },

            async loadProjectPhaseData() { // Renombrado y simplificado
                console.log("loadProjectPhaseData called for project:", this.selectedProject);
                if (!this.selectedProject || this.selectedProject.current_phase === 0) {
                     console.warn("loadProjectPhaseData: selectedProject is null or current_phase is 0, aborting data load.");
                     this.activities = [];
                     this.documents = [];
                     return;
                }
                await this.fetchActivitiesForCurrentPhase();
                await this.fetchDocumentsForCurrentPhase();
                this.activeTab = 'activities'; // Reset tab
                console.log("Project phase data loaded.");
            },

            async fetchUsersForSelectedRole() {
                this.availableUsersForRole = [];
                this.newActivity.selected_user_ids = [];
                if (!this.newActivity.context_role_id || !this.selectedProject) return;
                try {
                    const response = await fetch(`@Url.Action("GetUsersByRoleInProject", "RUP")?projectId=${this.selectedProject.id}&roleId=${this.newActivity.context_role_id}`);
                    if (!response.ok) throw new Error('Falló la carga de usuarios para el rol');
                    this.availableUsersForRole = await response.json();
                } catch (error) {
                    console.error("Error cargando usuarios para rol:", error);
                    this.availableUsersForRole = [];
                    alert("Error: " + error.message);
                }
            },
            async addActivity() {
                if (!this.newActivity.description.trim() ||
                    !this.selectedProject ||
                    this.newActivity.context_role_id === null ||
                    this.newActivity.selected_user_ids.length === 0) {
                    alert("Por favor, complete todos los campos requeridos, seleccione un rol y al menos un usuario.");
                    return;
                }
                try {
                    const payload = {
                        ProjectId: this.selectedProject.id, // Cambiado
                        PhaseId: this.selectedProject.current_phase, // Cambiado
                        Description: this.newActivity.description,
                        ContextRoleId: this.newActivity.context_role_id,
                        AssignedUserIds: this.newActivity.selected_user_ids,
                        Status: this.newActivity.status,
                        Due_Date: this.newActivity.due_date || null
                    };
                    const response = await fetch('@Url.Action("CreateActivity", "RUP")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(payload)
                    });
                    const result = await response.json();
                    if (!response.ok || !result.success) throw new Error(result.message || 'Falló la creación de la actividad');

                    // La respuesta 'result' debería ser la actividad creada con su 'id'
                    this.activities.push(result);
                    this.newActivity = { description: '', context_role_id: null, selected_user_ids: [], status: 'Pendiente', due_date: '' };
                    this.availableUsersForRole = [];
                    if(this.roles.length > 0 && this.newActivity.context_role_id === null) this.newActivity.context_role_id = null;
                } catch (error) { console.error("Error añadiendo actividad:", error); alert("Error: " + error.message); }
            },

            // ELIMINADO: fetchIterationsForCurrentProjectPhase

            async fetchActivitiesForCurrentPhase() { // Cambiado
                if (!this.selectedProject || this.selectedProject.current_phase === 0) { this.activities = []; return; }
                console.log(`Fetching activities for project ${this.selectedProject.id}, phase ${this.selectedProject.current_phase}`);
                try {
                    const response = await fetch(`@Url.Action("GetActivitiesForPhase", "RUP")?projectId=${this.selectedProject.id}&phaseId=${this.selectedProject.current_phase}`);
                    if (!response.ok) throw new Error('Falló la carga de actividades');
                    this.activities = await response.json();
                    console.log("Activities fetched:", this.activities);
                } catch (error) { console.error("Error cargando actividades:", error); this.activities = []; alert("Error: " + error.message);}
            },

            async fetchDocumentsForCurrentPhase() { // Cambiado
                if (!this.selectedProject || this.selectedProject.current_phase === 0) { this.documents = []; return; }
                console.log(`Fetching documents for project ${this.selectedProject.id}, phase ${this.selectedProject.current_phase}`);
                try {
                    const response = await fetch(`@Url.Action("GetDocumentsForPhase", "RUP")?projectId=${this.selectedProject.id}&phaseId=${this.selectedProject.current_phase}`);
                    if (!response.ok) throw new Error('Falló la carga de documentos');
                    this.documents = await response.json();
                    console.log("Documents fetched:", this.documents);
                } catch (error) { console.error("Error cargando documentos:", error); this.documents = []; alert("Error: " + error.message); }
            },

            async updateProjectPhase() {
                if (!this.selectedProject) return;
                console.log(`Updating project ${this.selectedProject.id} to phase ${this.selectedProject.current_phase}`);
                try {
                    const response = await fetch('@Url.Action("UpdateProjectPhase", "RUP")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ projectId: this.selectedProject.id, phaseId: this.selectedProject.current_phase })
                    });
                    const result = await response.json();
                    if (!response.ok || !result.success) throw new Error(result.message || 'Falló la actualización de fase');

                    // Recargar datos para la nueva fase
                    await this.loadProjectPhaseData();
                    // La propiedad selectedProject.current_phase ya está actualizada por x-model
                } catch (error) { console.error("Error actualizando fase del proyecto:", error); alert("Error: " + error.message); }
            },

            // ELIMINADO: addIteration
            // ELIMINADO: selectIteration
            // ELIMINADO: updateIterationStatus

            async updateActivityStatus(activityToUpdate) {
                 const localActivity = this.activities.find(a => a.id === activityToUpdate.id);
                 if (!localActivity) {
                     console.error("Cannot update status, activity not found locally:", activityToUpdate.id);
                     return;
                 }
                 const originalStatus = localActivity.status; // Guardar estado original
                 localActivity.status = activityToUpdate.status; // Actualización optimista

                 try {
                    const response = await fetch('@Url.Action("UpdateActivityStatus", "RUP")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ activityId: activityToUpdate.id, status: activityToUpdate.status })
                    });
                    const result = await response.json();
                     if (!response.ok || !result.success) {
                        if (localActivity) localActivity.status = originalStatus; // Revertir en caso de error
                        throw new Error(result.message || 'Falló la actualización del estado de la actividad');
                    }
                    // El estado ya está actualizado localmente
                } catch (error) {
                    console.error("Error actualizando estado de actividad:", error);
                    alert("Error: " + error.message);
                    if (localActivity) localActivity.status = originalStatus; // Revertir en caso de error
                }
            },

            handleFileUpload(event) {
                const file = event.target.files[0];
                if (file) { this.newDocument.file_name = file.name; this.newDocument.file_data_obj = file; }
                else { this.newDocument.file_name = ''; this.newDocument.file_data_obj = null; }
            },

            async addDocument() {
                if (!this.newDocument.file_data_obj || !this.selectedProject || !this.newDocument.type_clave) {
                    alert("Por favor, complete todos los campos y seleccione un archivo."); return;
                }
                const formData = new FormData();
                formData.append('ProjectId', this.selectedProject.id); // Cambiado
                formData.append('PhaseId', this.selectedProject.current_phase); // Cambiado
                formData.append('TypeClave', this.newDocument.type_clave);
                formData.append('Version', this.newDocument.version);
                formData.append('docFile', this.newDocument.file_data_obj);
                try {
                    const response = await fetch('@Url.Action("CreateDocument", "RUP")', { method: 'POST', body: formData });
                    const result = await response.json();
                    if (!response.ok || !result.success) throw new Error(result.message || 'Falló la subida del documento');

                    this.documents.push(result); // result debe ser el objeto del documento creado
                    this.newDocument = { type_clave: (this.documentTypes.length > 0 ? this.documentTypes[0].clave : ''), file_name: '', file_data_obj: null, version: '1.0' };
                    document.getElementById('docFile').value = null; // Limpiar input file
                } catch (error) { console.error("Error añadiendo documento:", error); alert("Error: " + error.message); }
            },

            async updateDocumentStatus(docToUpdate) {
                const localDoc = this.documents.find(d => d.id === docToUpdate.id);
                if (!localDoc) {
                    console.error("Cannot update status, document not found locally:", docToUpdate.id);
                    return;
                }
                const originalStatus = localDoc.status;
                localDoc.status = docToUpdate.status; // Actualización optimista

                try {
                    const response = await fetch('@Url.Action("UpdateDocumentStatus", "RUP")', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ documentId: docToUpdate.id, status: docToUpdate.status })
                    });
                    const result = await response.json();
                    if (!response.ok || !result.success) {
                        if(localDoc) localDoc.status = originalStatus; // Revertir
                        throw new Error(result.message || 'Falló la actualización del estado del documento');
                    }
                } catch (error) {
                    console.error("Error actualizando estado de documento:", error);
                    alert("Error: " + error.message);
                    if(localDoc) localDoc.status = originalStatus; // Revertir
                }
            },
            downloadDocument(documentId, originalFileName) {
                try {
                    const downloadUrl = `@Url.Action("DownloadDocument", "RUP")?documentId=${documentId}`;
                    window.location.href = downloadUrl;
                } catch (error) {
                    console.error("Error al iniciar descarga de documento:", error);
                    alert("Error al iniciar la descarga del documento: " + error.message);
                }
            },
            getPhaseName(phaseId) {
                const phase = this.phases.find(p => p.id === phaseId);
                return phase ? phase.name : 'N/A';
            },
            getRoleName(roleId) {
                const role = this.roles.find(r => r.id === roleId);
                return role ? role.name : 'N/A';
            },
            getDocumentTypeName(docTypeClave) {
                const docType = this.documentTypes.find(dt => dt.clave === docTypeClave);
                return docType ? docType.name : 'N/A';
            },
            getStatusClass(status) { // Esta función sigue siendo útil
                switch (status) {
                    case 'Pendiente': return 'status-badge status-pending';
                    case 'En Progreso': return 'status-badge status-in-progress';
                    case 'Completada': return 'status-badge status-completed';
                    case 'En Revisión': return 'status-badge status-in-review';
                    case 'Validado': return 'status-badge status-validated';
                    case 'Bloqueada': return 'status-badge status-pending'; // O un estilo específico para bloqueado
                    case 'Obsoleto': return 'status-badge status-cancelled'; // O un estilo específico para obsoleto
                    default: return 'status-badge bg-gray-200 text-gray-700';
                }
            },
            // ELIMINADO: getIterationStatusClass (o renombrar si las fases tuvieran un estado visual similar)
            formatDateTime(isoString) { // Sigue siendo útil
                if (!isoString) return null;
                try {
                    let date = new Date(isoString);
                    if (isNaN(date.getTime())) {
                        const msDateMatch = isoString.match(/\/Date\((\d+)\)\//);
                        if (msDateMatch && msDateMatch[1]) {
                            date = new Date(parseInt(msDateMatch[1]));
                        } else {
                            return "Fecha Inválida";
                        }
                    }
                    if (isNaN(date.getTime())) return "Fecha Inválida";
                    return date.toLocaleString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric', hour: '2-digit', minute: '2-digit' });
                } catch (e) {
                    console.warn("Error formateando fecha:", isoString, e);
                    return "Fecha Inválida";
                }
            }
        }
    }
    </script>
</body>