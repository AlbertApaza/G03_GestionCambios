@model G03_ProyectoGestion.Models.tbProyectos
@{
    ViewBag.Title = $"Cronograma: {Model.nombreProyecto}";
    string projectStartDateStr = Model.fechaInicio?.ToString("yyyy-MM-dd");
    string projectEndDateStr = Model.fechaFin?.ToString("yyyy-MM-dd");
    var sprintsAndBacklogsData = ViewBag.SprintsAndBacklogsData as List<dynamic> ?? new List<dynamic>();
    var productBacklogOnlyItems = ViewBag.ProductBacklogOnlyItems as List<dynamic> ?? new List<dynamic>();
    int currentUserRoleId = ViewBag.CurrentUserRoleId ?? 0;
}

<script src="https://cdn.tailwindcss.com"></script>
<script defer src="https://cdn.jsdelivr.net/npm/alpinejs@3.x.x/dist/cdn.min.js"></script>
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">

<style>
    .gantt-container { display: flex; flex-direction: column; }
    .gantt-header { display: flex; background-color: #e9ecef; font-weight: bold; border: 1px solid #dee2e6; }
    .gantt-task-name-header { flex: 0 0 350px; padding: 0.5rem; border-right: 1px solid #dee2e6; }
    .gantt-timeline-header { flex-grow: 1; padding: 0.5rem; text-align: center; }

    .gantt-row { display: flex; border-left: 1px solid #dee2e6; border-right: 1px solid #dee2e6; border-bottom: 1px solid #dee2e6; align-items: center; min-height: 2.5em; }
    .gantt-row:first-child { border-top: 1px solid #dee2e6; }
    .gantt-task-name { flex: 0 0 350px; padding: 0.5rem; border-right: 1px solid #dee2e6; white-space: nowrap; overflow: hidden; text-overflow: ellipsis; }
    .gantt-task-name.project { font-weight: bold; background-color: #f8f9fa; }
    .gantt-task-name.sprint { padding-left: 1.5rem; font-weight: 500; background-color: #eef2f7; }
    .gantt-task-name.backlog-item { padding-left: 3rem; font-size: 0.9em; background-color: #ffffff; }


    .gantt-bar-area { flex-grow: 1; position: relative; min-height: inherit; }
    .gantt-bar { position: absolute; height: 60%; top: 20%; background-color: #007bff; border-radius: 3px; opacity: 0.7; display: flex; align-items: center; justify-content: center; color: white; font-size: 0.75rem; overflow: hidden; padding: 0 0.3rem; box-sizing: border-box;}
    .gantt-bar.project-bar { background-color: #5a2a8c; opacity: 0.8; }
    .gantt-bar.sprint-bar { background-color: #1aa053; }


    .gantt-grid { position: absolute; top: 0; left: 0; width: 100%; height: 100%; display: flex; z-index: -1; }
    .gantt-grid-day { flex: 1 1 0px; border-right: 1px dotted #ced4da; }
    .gantt-grid-day:last-child { border-right: none; }

    .timeline-scale { display: flex; border-left: 1px solid #dee2e6; border-right: 1px solid #dee2e6; border-bottom: 1px solid #dee2e6; }
    .timeline-scale-spacer { flex: 0 0 350px; border-right: 1px solid #dee2e6;}
    .timeline-scale-months-container { display: flex; flex-grow: 1;}
    .timeline-scale-month { padding: 0.25rem 0.5rem; border-right: 1px solid #dee2e6; text-align: center; font-size: 0.8em; background-color: #f8f9fa; }
    .timeline-scale-month:last-child { border-right: none; }

    .btn { display: inline-flex; align-items: center; justify-content: center; padding: 0.6rem 1.2rem; border-radius: 0.375rem; font-weight: 600; transition: background-color 0.15s ease-in-out; cursor: pointer; }
    .btn-primary { background-color: #3B82F6; color: white; }
    .btn-primary:hover { background-color: #2563EB; }
</style>

<body class="bg-gray-100 text-gray-800"
      x-data="cronogramaPage('@projectStartDateStr', '@projectEndDateStr', @Html.Raw(Json.Encode(sprintsAndBacklogsData)), @Html.Raw(Json.Encode(productBacklogOnlyItems)))">
    <div class="container mx-auto p-4">
        <header class="bg-blue-600 text-white p-6 rounded-t-lg shadow-lg mb-6">
            <div class="flex justify-between items-center">
                <h1 class="text-4xl font-bold">@ViewBag.Title</h1>
                <a href="@Url.Action("Index", "SCRUM", new { id = Model.idProyecto })" class="btn bg-blue-500 hover:bg-blue-400 text-sm">
                    <i class="fas fa-arrow-left mr-2"></i>Volver al Tablero
                </a>
            </div>
            <p class="text-blue-100 mt-1">@Model.descripcionProyecto</p>
        </header>

        <main class="p-6 bg-white rounded-lg shadow-lg">
            <div x-show="!projectGanttStartDate || !projectGanttEndDate">
                 <p class="text-md text-yellow-700 italic p-4 bg-yellow-50 border border-yellow-200 rounded-md">
                    Fechas del proyecto no definidas completamente o inválidas para mostrar el cronograma Gantt.
                </p>
            </div>

            <div x-show="projectGanttStartDate && projectGanttEndDate" class="gantt-container mt-4">
                <div class="gantt-header">
                    <div class="gantt-task-name-header">Nombre del Elemento</div>
                    <div class="gantt-timeline-header">Línea de Tiempo</div>
                </div>
                <div class="timeline-scale">
                    <div class="timeline-scale-spacer"></div>
                    <div class="timeline-scale-months-container">
                        <template x-for="month in timelineMonths" :key="month.name">
                            <div class="timeline-scale-month" :style="{ flexGrow: month.daysInView }" x-text="month.name"></div>
                        </template>
                    </div>
                </div>

                <div class="gantt-row">
                    <div class="gantt-task-name project">
                        <i class="fas fa-project-diagram mr-2"></i>@Model.nombreProyecto
                    </div>
                    <div class="gantt-bar-area">
                        <div class="gantt-grid"><template x-for="dayOffset in totalGanttVisualDays" :key="dayOffset"><div class="gantt-grid-day"></div></template></div>
                        <div class="gantt-bar project-bar"
                             :style="getBarStyle(projectGanttStartDate, projectGanttEndDate, projectGanttStartDate, totalGanttVisualDays)"
                             x-text="`Proyecto (${getDurationInDays(projectGanttStartDate, projectGanttEndDate)} días)`">
                        </div>
                    </div>
                </div>

                <template x-if="productBacklogOnlyItems.length > 0">
                    <>
                        <div class="gantt-row">
                            <div class="gantt-task-name sprint" style="background-color: #f0e6ff;">
                                <i class="fas fa-clipboard-list mr-2"></i>Product Backlog (No Asignado)
                            </div>
                            <div class="gantt-bar-area">
                                <div class="gantt-grid"><template x-for="dayOffset in totalGanttVisualDays" :key="dayOffset"><div class="gantt-grid-day"></div></template></div>
                            </div>
                        </div>
                        <template x-for="item in productBacklogOnlyItems" :key="item.id">
                            <div class="gantt-row">
                                <div class="gantt-task-name backlog-item" style="padding-left: 1.5rem;">
                                    <i class="fas fa-thumbtack mr-1 text-gray-400"></i><span x-text="item.description"></span>
                                    <span class="text-xs text-gray-400 ml-1" x-text="'(P: ' + (item.priority || 'N/A') + ')'"></span>
                                </div>
                                <div class="gantt-bar-area">
                                     <div class="gantt-grid"><template x-for="dayOffset in totalGanttVisualDays" :key="dayOffset"><div class="gantt-grid-day"></div></template></div>
                                </div>
                            </div>
                        </template>
                    </>
                </template>

                <template x-for="sprint in sortedSprints" :key="sprint.id">
                    <>
                        <div class="gantt-row">
                            <div class="gantt-task-name sprint">
                                <i class="fas fa-rocket mr-2"></i><span x-text="sprint.name"></span>
                            </div>
                            <div class="gantt-bar-area">
                                <div class="gantt-grid"><template x-for="dayOffset in totalGanttVisualDays" :key="dayOffset"><div class="gantt-grid-day"></div></template></div>
                                <div class="gantt-bar sprint-bar"
                                     x-show="sprint.start_date && sprint.end_date"
                                     :style="getBarStyle(sprint.start_date, sprint.end_date, projectGanttStartDate, totalGanttVisualDays)"
                                     x-text="`${sprint.name} (${getDurationInDays(sprint.start_date, sprint.end_date)} días)`">
                                </div>
                            </div>
                        </div>

                        <template x-for="item in sprint.BacklogItems" :key="item.id">
                            <div class="gantt-row">
                                <div class="gantt-task-name backlog-item">
                                    <i class="fas fa-tasks mr-1 text-gray-500"></i><span x-text="item.description"></span>
                                    <span class="text-xs text-gray-400 ml-1" x-text="'(P: ' + (item.priority || 'N/A') + ')'"></span>
                                </div>
                                <div class="gantt-bar-area">
                                     <div class="gantt-grid"><template x-for="dayOffset in totalGanttVisualDays" :key="dayOffset"><div class="gantt-grid-day"></div></template></div>
                                </div>
                            </div>
                        </template>
                         <template x-if="sprint.BacklogItems && sprint.BacklogItems.length === 0">
                             <div class="gantt-row">
                                <div class="gantt-task-name backlog-item italic text-gray-400"> (No hay tareas en este sprint)</div>
                                <div class="gantt-bar-area"><div class="gantt-grid"><template x-for="dayOffset in totalGanttVisualDays" :key="dayOffset"><div class="gantt-grid-day"></div></template></div></div>
                             </div>
                        </template>
                    </>
                </template>
                <template x-if="sortedSprints.length === 0 && productBacklogOnlyItems.length === 0">
                    <div class="gantt-row">
                        <div class="gantt-task-name"></div>
                        <div class="p-2 italic text-gray-500 flex-grow text-center">
                            No hay sprints con fechas válidas ni items en el Product Backlog para mostrar.
                        </div>
                    </div>
                </template>
            </div>
        </main>

        <footer class="text-center text-sm text-gray-500 mt-12 pb-6">
            Gestor SCRUM © @DateTime.Now.Year
        </footer>
    </div>

<script>
function cronogramaPage(projectStartDateString, projectEndDateString, sprintsAndBacklogsData, productBacklogOnlyItemsData) {
    const MS_PER_DAY = 1000 * 60 * 60 * 24;

    function parseDateAsUTC(dateString) {
        if (!dateString) return null;
        const date = new Date(dateString + 'T00:00:00Z');
        return isNaN(date.getTime()) ? null : date;
    }

    return {
        projectRawStartDate: projectStartDateString,
        projectRawEndDate: projectEndDateString,
        sprintsWithNestedBacklogs: [],
        productBacklogOnlyItems: [],

        projectGanttStartDate: null,
        projectGanttEndDate: null,
        totalGanttVisualDays: 0,
        timelineMonths: [],

        get sortedSprints() {
            return [...this.sprintsWithNestedBacklogs]
                .filter(s => s.start_date && s.end_date && parseDateAsUTC(s.start_date) && parseDateAsUTC(s.end_date))
                .sort((a, b) => parseDateAsUTC(a.start_date) - parseDateAsUTC(b.start_date));
        },

        init() {
            this.sprintsWithNestedBacklogs = Array.isArray(sprintsAndBacklogsData) ? sprintsAndBacklogsData : [];
            this.productBacklogOnlyItems = Array.isArray(productBacklogOnlyItemsData) ? productBacklogOnlyItemsData : [];

            this.projectGanttStartDate = parseDateAsUTC(this.projectRawStartDate);
            this.projectGanttEndDate = parseDateAsUTC(this.projectRawEndDate);

            if (this.projectGanttStartDate && this.projectGanttEndDate && this.projectGanttEndDate >= this.projectGanttStartDate) {
                this.totalGanttVisualDays = Math.ceil((this.projectGanttEndDate.getTime() - this.projectGanttStartDate.getTime()) / MS_PER_DAY) + 1;
                this.generateTimelineMonths();
            } else {
                this.projectGanttStartDate = null;
                this.projectGanttEndDate = null;
                this.totalGanttVisualDays = 0;
            }
        },

        generateTimelineMonths() {
            if (!this.projectGanttStartDate || !this.projectGanttEndDate || this.totalGanttVisualDays <= 0) {
                 this.timelineMonths = [];
                 return;
            }
            let months = [];
            let currentMonthStart = new Date(this.projectGanttStartDate.valueOf());
            currentMonthStart.setUTCDate(1);
            while (currentMonthStart <= this.projectGanttEndDate) {
                const monthName = currentMonthStart.toLocaleDateString('es-ES', { month: 'short', year: 'numeric', timeZone: 'UTC' });
                let daysInViewForThisMonth = 0;
                let tempDate = new Date(currentMonthStart.valueOf());
                for (let i = 0; i < 31; i++) { 
                    let dayBeingChecked = new Date(tempDate.valueOf());
                    dayBeingChecked.setUTCDate(currentMonthStart.getUTCDate() + i);
                    if (dayBeingChecked.getUTCMonth() !== currentMonthStart.getUTCMonth()) break; 
                    if (dayBeingChecked >= this.projectGanttStartDate && dayBeingChecked <= this.projectGanttEndDate) {
                        daysInViewForThisMonth++;
                    }
                }
                if (daysInViewForThisMonth > 0) {
                     months.push({ name: monthName, daysInView: daysInViewForThisMonth });
                }
                currentMonthStart.setUTCMonth(currentMonthStart.getUTCMonth() + 1);
            }
            this.timelineMonths = months;
        },
        formatDisplayDate(dateInput) {
            const date = (typeof dateInput === 'string') ? parseDateAsUTC(dateInput) : dateInput;
            if (!date || isNaN(date.getTime())) return 'N/A';
            return date.toLocaleDateString('es-ES', { day: '2-digit', month: '2-digit', year: 'numeric', timeZone: 'UTC' });
        },
        getDurationInDays(startInput, endInput) {
            const startDate = (typeof startInput === 'string') ? parseDateAsUTC(startInput) : startInput;
            const endDate = (typeof endInput === 'string') ? parseDateAsUTC(endInput) : endInput;
            if (!startDate || !endDate || isNaN(startDate.getTime()) || isNaN(endDate.getTime()) || endDate < startDate) return '?';
            return Math.ceil((endDate.getTime() - startDate.getTime()) / MS_PER_DAY) + 1;
        },
        getBarStyle(itemStartDateStr, itemEndDateStr, ganttViewStartDate, ganttViewTotalDays) {
            const itemStart = parseDateAsUTC(itemStartDateStr);
            const itemEnd = parseDateAsUTC(itemEndDateStr);
            if (!itemStart || !itemEnd || !ganttViewStartDate || !ganttViewTotalDays || itemEnd < itemStart || ganttViewTotalDays <= 0) {
                return { display: 'none' }; 
            }
            const offsetDays = Math.max(0, Math.floor((itemStart.getTime() - ganttViewStartDate.getTime()) / MS_PER_DAY));
            const durationDays = Math.ceil((itemEnd.getTime() - itemStart.getTime()) / MS_PER_DAY) + 1;
            const leftPercentage = (offsetDays / ganttViewTotalDays) * 100;
            const widthPercentage = (durationDays / ganttViewTotalDays) * 100;
            const actualWidth = Math.min(widthPercentage, 100 - leftPercentage);
            return {
                left: `${leftPercentage}%`,
                width: `${Math.max(0, actualWidth)}%`,
            };
        }
    }
}
</script>
</body>